RLTSUB      TITLE 'Move result into EVALBLOCK'
RLTSUB      AMODE 31
RLTSUB      RMODE ANY
*----------------------------------------------------------------------
* This s/routine is called with address of plist in r1.
* (look at RLTPLST macro for details).
*
* First IRXRLT is called with GETBLOCK function to request
* the EVALBLOK of the appropriate size. After that, result data
* is moved into the EVALBLOK. REXX kernel will take care of setting
* the result variable.
*
*
*06/95 Alex Brodsky
*----------------------------------------------------------------------
RLTSUB      CSECT
         USING RLTSUB,R15            ; Address program
         SAVE  (14,12),,RLTSUB.ALEX.BRODSKY.&SYSDATE.&SYSTIME
         LR    R12,R15            ; Set program base
         DROP  R15
         USING RLTSUB,R12         ; Address program
         LR    R9,R1              ; Get the plist address
         USING RLTPLST,R9         ; Plist for the program
* chain saveareas
         LA    R1,RLTPLST_SAVEAREA ; Plist savearea address
         ST    R1,8(R13)          ; ... chain
         ST    R13,4(R1)          ; ... ... save
         LR    R13,R1             ; ... ... ... areas
* chain saveareas
*--------------------------------------------------------------------*
* Initialize IRXRLT plist.
*  We may need to use it if data to be returned will not fit into
*  (REXX) preallocated EVALBLOK
*  Note that unlike VM, REXX pre-allocates a small EVALBLOK
*  for use, and if size of it is not enough, IRXRLT should be called.
*  The size of a preallocated EVALBLOK is stored in the
*  EVALBLOCK_EVSIZE (in dwords). The available area for result
*  has a length of EVSIZE*8-16.
*  REXX documents the size of data area in the EVALBLOK as 250 bytes.
*
*--------------------------------------------------------------------*
         LA    R2,KCGETB          ; Plist identifier
         ST    R2,RLTPL1          ; Save the address
         LA    R2,RLTA2           ; Get the unused parameter
         ST    R2,RLTPL2          ; ... address in the plist
*                                 ; ... where EVALBLOCK address
*                                 ; ... will be returned
         XC    RLTA2(4),RLTA2     ; Not used for GETBLOCK function
         LA    R2,RLTA3           ; Get the address of length
         ST    R2,RLTPL3          ; and save in the plist
         OI    RLTPL3,X'80'       ; Last parameter there
*.
         L     R15,EVB    ; GET THE ADDR OF EVALBLOCK ADDRESS
         L     R15,0(,R15)        ; GET THE EVALBLOCK ADDRESS
         USING EVALBLOCK,R15      ; TELL ASSEMBLER
         L     R14,EVALBLOCK_EVSIZE ; FIGURE OUT
         SLL   R14,3              ; ... AVAILABLE AREA
         S     R14,=F'16'         ; ... MINUS PREFIX SIZE
*
         L     R3,RESULT          ; POINT TO RESULT THING
         LA    R2,0(,R3)          ; GET THE LENGTH ADDRESS
         L     R2,0(,R3)          ; GET THE LENGTH
         ST    R2,RLTA3           ; SAVE IN IRXRLT PARM
*.
*. SEE IF WE HAVE ENOUGH STORAGE FOR RESULT DATA.
*. R14 - AVAILABLE IN THE EVALBLOCK
*.
         CR    R14,R2             ; DO WE HAVE ENOUGH?
         BNL   EXIT1              ; YES, SKIP IRXRLT CALL.
*.
*. PREALLOCATED EVALBLOCK IS NOT LARGE ENOUGH TO RETURN THE
*. RESULT. WE NEED TO CALL IRXRLT TO ALLOCATE A NEW EVALBLOCK
*.
*
* GET THE ADDRESS OF IRXRLT FROM IRXEXTE
*
         L     R1,ENV             ; ENVBLOCK ADDRESS
         L     R1,ENVBLOCK_IRXEXTE-ENVBLOCK(,R1) ; IRXEXTE ADDRESS
         USING IRXEXTE,R1         ; TELL ASSEMBLER
         L     R15,IRXRLT         ; RESULT ROUTINE
         DROP  R1
*
         L     R0,ENV             ; OPTIONAL ENVIRONMENT BLOCK
         LR    R5,R0
         LA    R1,RLTPL           ; IRXRLT PLIST
         BALR  R14,R15            ; CALL IT
***      LINK  EP=IRXRLT,MF=(E,RLTPL) ; CALL IT
*
*
* NOW WE HAVE TO SAVE THE RETURNED ADDRESS.
*
         L     R15,EVB            ; ADDRESS OF EVALBLOCK ADDRESS
         MVC   0(4,R15),RLTA2     ; ADDRESS RETURNED HERE.
         L     R15,0(,R15)        ; NOW EVALBLOCK ADDRESS
*
* MOVE THE DATA INTO EVALBLOCK.
*
         ST    R2,EVALBLOCK_EVLEN ; SAVE THE DATA LENGTH
         LA    R6,EVALBLOCK_EVDATA ; TO: ADDRESS
         LR    R7,R2              ; TO: LENGTH
         LA    R4,4(,R3)          ; FROM: ADDRESS
         LR    R5,R2              ; FROM: LENGTH
         MVCL  R6,R4              ; MOVE THE DATA
         B     EXIT0              ; DONE.
*
* HERE IF PREALLOCATED EVALBLOCK IS LARGE ENOUGH.
*  THE NEXT 3 INSTRUCTIONS ARE JUST IN CASE BECAUSE IT IS
*  DOCUMENTED THAT PREALLOCATED EVALBLOCK HAS 250 BYTES AVAILABLE
*  FOR DATA TO BE RETURNED.
*
EXIT1    DS    0H
         C     R2,=F'255'         ; MORE THAN MVC CAN HANDLE?
         BNH   *+8                ; NO
         LA    R2,255             ; CUT THE MESSAGE SHORT.
         ST    R2,EVALBLOCK_EVLEN ; SAVE THE DATA LENGTH
         BCT   R2,*+10            ; MOVE THE DATA
         MVC   EVALBLOCK_EVDATA(0),4(R3) ; *** EXECUTED ***
         EX    R2,*-6             ; ... INTO EVALBLOCK
         DROP  R15                ; EVALBLOCK
*
* Return to caller. REXX will eventually set result.
*
EXIT0    DS    0H
         L     R13,4(,R13)        ; Previous save area
         RETURN (14,12),RC=0
*--------------------------------------------------------------------*
*     CONSTANTS
*--------------------------------------------------------------------*
KCGETB   DC    CL8'GETBLOCK'      ; NEED FOR IRXRLT CALL.
         DS    0D
         LTORG
*--------------------------------------------------------------------*
*                    DSECTS
*--------------------------------------------------------------------*
         RLTPLST DSECT=YES
         SPACE 2
         PRINT ON
R0       EQU   0
R1       EQU   1    RLTPLST address passed by caller
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9    RLTPLST base
R10      EQU   10
R11      EQU   11
R12      EQU   12   BASE
R13      EQU   13   Savearea
R14      EQU   14
R15      EQU   15
*
*--------------------------------------------------------------------*
* REXX MACROS.
*--------------------------------------------------------------------*
         PRINT OFF,NOGEN
         IRXENVB                  ; ENVIRONMENT BLOCK (R0 ON ENTRY)
         IRXEFPL DSECT=YES        ; EXTERNAL FUNCTION PLIST (R1)
         IRXARGTB                 ; MAP THE ARGUMENT LIST.
         IRXEVALB                 ; EVALBLOCK TO RETURN RESULT.
         IRXEXTE                  ; EXTERNAL ENTRY POINTS
         END
