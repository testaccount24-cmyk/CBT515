RXWTOR      TITLE 'Issue WTO or WTOR from REXX'
RXWTOR      AMODE 31
RXWTOR      RMODE ANY
*----------------------------------------------------------------------
* When called as an external rexx subroutine this program will
*  issue WTO or WTOR to the console.
*
*   R15 is always set to 0; if arguments are missing or
*      something equally ugly happened, it is set to 1,
*      therefore exec terminates;
*
*   Result is set either 0 it everything went fine, or
*    is set to 8 and error message is issued.
*
*   Parameters:
*      Parens are required for 2nd - 4th parameters
*      (n-m) specification (see WTO macro) is not supported for these.
*
*
*   1st - message to be sent, must be first and must be present.
*   next 3 in any order, none is required
*   DESC=(n,n,...n) - descriptor codes.
*                     Example: DESC=(2,3,7) or DESC=(2).
*   ROUTCDE=(n,n,...n) - routing codes.
*                     Example: ROUTCDE=(1,11) or ROUTCDE=(11)
*   REPLY=(YES)     - uses WTOR macro, returns operator's reply
*                     in rexx variable REPLY.
*                     Null reply is not allowed and
*                     wtor is reissued.
*
*   Examples:
*    result = RXWTOR("This is a wto message",'DESC=(2)');
*    rc = RXWTOR('Reply U to continue','DESC=(2)','ROUTCDE=(1)',
*         'REPLY=(YES)');
*
* Note that this function can be used standalone as well as a part
* of rexx function package
*
* Also note that WTO/WTOR plists are hand-built and just DESC and
*  ROUTCDE options are supported.
*
*
*04/2001 Alex Brodsky
*----------------------------------------------------------------------
RXWTOR   LGN@ENT   CSECT
*already LM    R0,R1,20(R1)       ; Restore ENVB and EFPL pointers
         ST    R0,ENV             ; Save it for calls to rexx services
         SPACE 3
START    DS    0H
         LR    R9,R1              ; Get the EFPL address
         USING EFPL,R9            ; Extended function plist
*------------------------------------------------------
* Get the address of IRXEXCOM and IRXSAY from IRXEXTE
*------------------------------------------------------
         L     R1,ENV             ; ENVBLOCK address
         L     R1,ENVBLOCK_IRXEXTE-ENVBLOCK(,R1) ; IRXEXTE address
         USING IRXEXTE,R1         ; Tell assembler
         MVC   ZZZEXCOM(4),IRXEXCOM ; Var access routine
         MVC   ZZZSAY(4),IRXSAY     ; say routine
         DROP  R1
         SPACE 3
*--------------------------------------------------------------------*
* Initialize all the necessary plists.
*--------------------------------------------------------------------*
*. Init the EVALBLOK.
*.  Move an address of a result string in the
*.   RESULT variable.
*.  RLTSUB routine code will set the RESULT with whatever
*.   is pointed to by 'RESULT' variable
*.
         L     R2,EFPLEVAL        ; Get the EVALBLOCK address
         ST    R2,EVB             ; Save it for exit routine.
         MVC   KCOTH(LKCOTH),KCOK ; Init the retcode result
         LA    R2,KCOTH           ; Point to retcode from WTO
         ST    R2,RESULT          ; ...
*
*--------------------------------------------------------------------*
* Now look at arguments passed by the caller.
*  If argument is not supploed (pointer is zero) or
*  missing entirely (we hit the fence, 8X'FF'), we will issue
*  a message and exit this function.
*--------------------------------------------------------------------*
         L     R4,EFPLARG         ; Pointer to arguments
         USING ARGTABLE_ENTRY,R4  ; Map the entry
* ARG 1 - message, MUST BE PRESENT.
         ICM   R3,B'1111',ARGTABLE_ARGSTRING_PTR ; Get the address
         BNP   INCORARGS          ; Wrong!
         ST    R3,AP              ; Save the address
         ICM   R3,B'1111',ARGTABLE_ARGSTRING_LENGTH ; Get the length
         BNP   INCORARGS          ; Wrong!
         ST    R3,LP              ; Save the length
         LA    R4,ARGTABLE_NEXT   ; Adjust base - next entry
*
* Copy message to WTO plist, also set flags for default message.
*
         LM    R5,R6,LP           ; Get the length and address
         C     R5,=F'120'         ; Greater than 120 bytes?
         BH    INCORARGS          ; Invalid length
         LTR   R5,R5              ; Get length of the field
         BZ    INCORARGS          ; Invalid size
*
         LA    R0,4(,R5)          ; size + 4
         STCM  R0,B'0011',WTO_LEN  ; and save in plist
         BCT   R5,*+10
         MVC   WTO_TXT(0),0(R6) ; *** executed ***
         EX    R5,*-6
         SPACE 2
* ARG 2 - Can be either ROUTCDE=, DESC= or REPLY= or nothing at all.
         ICM   R3,B'1111',ARGTABLE_ARGSTRING_PTR ; Get the address
         BNP   issue_wto          ; Nothing else, issue wto.
         ST    R3,AP              ; Save the address
         ICM   R3,B'1111',ARGTABLE_ARGSTRING_LENGTH ; Get the length
         BNP   issue_wto          ; Nothing else, issue wto.
         ST    R3,LP              ; Save the length
         LA    R4,ARGTABLE_NEXT   ; Adjust base - next entry
         BAL   R7,process_parm    ; look at it
         BNZ   INCORARGS          ; error
* ARG 3 - Can be either ROUTCDE=, DESC= or REPLY= or nothing at all.
         ICM   R3,B'1111',ARGTABLE_ARGSTRING_PTR ; Get the address
         BNP   issue_wto_or_wtor  ; Nothing else, issue wto or wtor
         ST    R3,AP              ; Save the address
         ICM   R3,B'1111',ARGTABLE_ARGSTRING_LENGTH ; Get the length
         BNP   issue_wto_or_wtor  ; Nothing else, issue wto or wtor
         ST    R3,LP              ; Save the length
         LA    R4,ARGTABLE_NEXT   ; Adjust base - next entry
         BAL   R7,process_parm    ; look at it
         BNZ   INCORARGS          ; error
* ARG 4 - Can be either ROUTCDE=, DESC= or REPLY= or nothing at all.
         ICM   R3,B'1111',ARGTABLE_ARGSTRING_PTR ; Get the address
         BNP   issue_wto_or_wtor  ; Nothing else, issue wto or wtor
         ST    R3,AP              ; Save the address
         ICM   R3,B'1111',ARGTABLE_ARGSTRING_LENGTH ; Get the length
         BNP   issue_wto_or_wtor  ; Nothing else, issue wto or wtor
         ST    R3,LP              ; Save the length
         LA    R4,ARGTABLE_NEXT   ; adjust base - next entry
         BAL   R7,process_parm    ; look at it
         BNZ   INCORARGS          ; error
* ARG 5 - Should not be there.
         ICM   R3,B'1111',ARGTABLE_ARGSTRING_PTR ; Get the address
         BP    INCORARGS          ; error
         ICM   R3,B'1111',ARGTABLE_ARGSTRING_LENGTH ; Get the length
         BP    INCORARGS          ; error
**
         DROP  R4                 ; ARGTABLE_ENTRY
         DROP  R9                 ; EFPL
*=================================================================
issue_wto_or_wtor ds 0H
         TM    @reply,L'@reply    ; was reply= in plist?
         BNO   issue_wto          ; no, issue wto.
         SPACE 2
issue_wtor ds  0H
*
* determine what to place in plist
*
         xc    wtor_ecb(4),wtor_ecb ; if not the first time
         LA    R0,reply             ; fill up reply address
         st    r0,wtor_ra           ; ...
         oi    wtor_ra,x'80'        ; ...
         mvi   wtor_rl,reply_length ; and reply length

         la    r0,wtor_ecb          ; fill up ecb address
         st    r0,wtor_ea           ; ..

* copy message to wtor plist

         SLR   r2,r2                ; prepare
         icm   r2,B'0011',wto_len   ; message size
         BCT   R2,*+10              ; ------------------+
         MVC   WTOR_TXT(0),WTO_TXT  ; *** executed ***  |
         EX    R2,*-6               ; <-----------------+
*
* move flags after the message. Might not be needed.
*
         LA    R1,WTOR_PL           ; plist address
         la    r1,(12+1)(R1,r2)         ; addr after the message
         mvc   0(2,r1),wto_desc     ; first desc codes
         mvc   2(2,r1),wto_rout     ; then routing codes

* text size
         la    r2,(4+1)(,r2)        ; msg length +4 + 1 (bct).
         stc   r2,wtor_len          ; save in plist

         MVC   WTOR_MCS(2),MCSFLAG  ; presume non-default
         TM    @ROUTCDE,L'@ROUTCDE  ; any route codes?
         BO    issue_wtor_02        ; yes, can issue wtor
         TM    @DESC,L'@DESC        ; any dest  codes?
         BO    issue_wtor_02        ; yes, can issue wtor
         xc    wtor_mcs(2),wtor_mcs ; default wtor
issue_wtor_02 ds 0H
         mvi   reply,c' '
         mvc   reply+1(reply_length-1),reply ; clear to blanks
         WTOR  MF=(E,WTOR_PL)
         LTR   R15,R15
         BZ    ISSUE_WAIT
         LA    R1,ERM003          ; issue error message
         BAL   R14,issue_error    ; ...
         MVI   KCOTH+4,C'8'       ; rc=8
         B     EXIT
issue_wait ds 0h
         WAIT  ECB=WTOR_ECB
*
* Make sure that reply is not blank, and strip blanks from it.
*
         la    r2,reply           ; buffer address
         la    r3,reply_length    ; its size
         la    r1,0(r2,r3)        ; byte after last of reply buffer
find_reply ds 0h                  ; <-------------------+
         bctr  r1,0               ; back off 1 byte     |
         cli   0(r1),c' '         ; still blank?        |
         bne   fr_01              ; no.                 |
         bct   r3,find_reply      ; --------------------+
         b     issue_wtor         ; re-issue wtor if just blanks
fr_01    ds    0h                 ; <-------------------+
* strip leading blanks                                  |
         cli   0(r2),c' '                               |
         bne   fr_02                                    |
         la    r2,1(,r2)                                |
         bct   r3,fr_01           ; scan forward -------+
* cannot fall through
fr_02    ds    0H
*
* R2 - reply address
* R3 - reply size
         b     set_reply          ; set reply and exit to caller
*
*
issue_wto DS   0H
*
* determine what to place in plist
*
         MVC   WTO_MCS(2),MCSFLAG   ; presume non-default
         TM    @ROUTCDE,L'@ROUTCDE  ; any route codes?
         BO    issue_wto_02         ; yes, need to copy flags
         TM    @DESC,L'@DESC        ; any dest  codes?
         BNO   issue_wto_00         ; no, user default format of wto
issue_wto_02 ds 0H
*
* move flags after the message.
*
         LA    R1,WTO_PL            ; plist address
         SLR   r2,r2                ; prepare
         icm   r2,B'0011',wto_len   ; message size
         la    r1,0(R1,r2)          ; addr after the message
         mvc   0(2,r1),wto_desc     ; first desc codes
         mvc   2(2,r1),wto_rout     ; then routing codes
         B     issue_wto_01         ; issue wto
*
* Default wto plist, no flags.
*
issue_wto_00 ds 0H
         XC    WTO_MCS(2),WTO_MCS ; no flags for default wto
issue_wto_01 ds 0H
         WTO   MF=(E,WTO_PL)
         LTR   R15,R15
         BZ    EXIT               ; no errors, exit to caller
         LA    R1,ERM002          ; issue error message
         BAL   R14,issue_error    ; ...
         MVI   KCOTH+4,C'8'       ; rc=8
         B     EXIT
         EJECT
*
* set the rexx variable REPLY to the value of reply from operator,
*  then exit to caller
*
* R2 - reply address
* R3 - reply size
*
set_reply ds 0H
*
* Set irxexcom plist
*
         LA    R0,KCEXCOM         ; Point to character id
         ST    R0,EXCOMP1         ; Save as a first parm address
         XC    EXCOMP2(L'EXCOMP2+L'EXCOMP3),EXCOMP2 ; make these 0
         LA    R0,SHVB            ; Get the SHVBLOCK address
         ST    R0,EXCOMP4         ; Save as a fourth argument
         OI    EXCOMP4,X'80'      ; Flag the fourth as a last arg
*.
*. Now SHVBLOCK - shared variables block.
*.
         LA    R5,SHVB            ; Get to the first block
         USING SHVBLOCK,R5        ; Tell assembler
         XC    SHVBLOCK(SHVBLEN),SHVBLOCK ; Init to zeros.
*        XC    SHVNEXT(4),SHVNEXT ; Zero since it is a last block
*        XC    SHVUSER(4),SHVUSER ; No user info
*        MVI   SHVCODE,SHVSYSET   ; Lowercase 'S' for symbolic set
         MVI   SHVCODE,SHVSTORE   ; Uppercase 'S' for set
*
* var name - REPLY
*
         la    r1,KCREPLY
         ST    R1,SHVNAMA         ; addr of name
         MVC   SHVNAML(4),=A(L'KCREPLY)  ; and its size there
*
* now value address and size
*
         ST    R2,SHVVALA         ; value address
         st    r3,shvvall         ; and its size
*
         L     R0,ENV             ; Optional environment block address
         LA    R1,EXCOM           ; IRXEXCOM plist
         L     R15,ZZZEXCOM       ; Saved address
         BALR  R14,R15            ; Go there
*        LINK  EP=IRXEXCOM,MF=(E,EXCOM) ; ..
         b     exit
         drop  r5                 ; shvblock
         EJECT ,
*--------------------------------
* Process the parm.
*  AP  - parm address
*  LP  - parm length
*  R7  - linkage register
*
*--------------------------------
process_parm ds 0H
         stm   r0,r14,save_process_parm
         lm    r5,r6,lp            ; parm length and address
*
         LTR   R5,R5              ; Get length of the field
         BZ    pp_end_nok         ; Invalid size
*
* Uppercase the parm.
*
         BCT   R5,*+10            ; ----->-------------+
         TR    0(0,R6),UPPER      ; *** executed ***   |
         EX    R5,*-6             ; <------------------+
         LA    R5,1(,R5)          ; restore r5
*
         LA    R1,parmtab
ploop    ds    0H
         icm   r2,B'1100',0(R1)   ; entry size
         BZ    pp_end_nok         ; last entry, bad keyword
         SRL   r2,16              ; into low order bytes
         cr    r5,r2              ; at least that much
         bnh   ploop_next         ; no. get next parmtab entry
         BCT   r2,*+10            ; --lookup in table--+
         CLC   0(0,R6),(2+4)(R1)  ; *** executed ***   |
         ex    R2,*-6             ; <------------------+
         be    kwrd_found         ; found this keyword
ploop_next ds  0H
         la    r1,ptel(,R1)
         B     ploop              ; keep searching the table
*
kwrd_found ds 0H
         sr    r5,r2              ; value size after C'='
         bz    pp_end_nok         ; only keyword there
         ar    r6,r2              ; position at value after C'='
         cli   0(r6),c'('         ; need closing paren if so
         bne   kf_01              ; no
         la    r6,1(,r6)
         bct   r5,*+8             ; adjust length if possible-----+
         b     pp_end_nok         ; only keyword and paren        |
         la    r14,0(r5,r6)       ; position at the end of arg <--+
         bctr  r14,0
         cli   0(r14),c')'        ; closing paren there?
         bne   pp_end_nok         ; no, should be
         bct   r5,*+8             ; adjust length if possible-----+
         b     pp_end_nok         ; only keyword and parens       |
kf_01    ICM   r15,B'1111',2(r1)   ; routine address <------------+
         Balr  r14,r15            ; call it
         bz    pp_end_ok
pp_end_nok ds 0h
         Cli  *,x'93'              ; cc .ne. 0
         b   pp_end               ; and leave
pp_end_ok ds 0h
         cli  *,x'95'              ; cc=0
pp_end   ds   0H
         lm    r0,r14,save_process_parm
         br    r7                  ; back to caller
*---------------------------------------
* Processing routines for each keyword
*
*  r5 = parm size
*  r6 - parm address, no parens anymore
*
*  r14 - linkage
*
*  routing codes are flags in the 2-bytes field for
*    codes from 1 to 16, from left to right.
* routecode 1 - bit position 15
* routecode 2 - bit position 14
* ....
* routecode 16- bit position 0
*
* shift can be computed as 16-routcode
*
* same is true for desc codes
*
*
*---------------------------------------
process_routcde ds 0h
         stm    r0,r14,save_psp
         tm     @routcde,L'@routcde
         BO     prc_nok            ; 2nd time
         oi     @routcde,L'@routcde  ; set a flag
prc_loop ds     0H
         bal    r14,get_next       ; next routing code value
         bnz    prc_nok            ; errors
         ltr    r1,r1              ; result=0?
         be     prc_ok             ; yes, all processed, cc=0
* we dont support routcde >12 or zero
         c      r1,=f'12'
         bh     prc_nok            ; too big
         slr    r2,r2              ; prepare
         icm    r2,b'0011',wto_rout ; accumulator
         la     r3,1               ; bit to shift
         s      r1,=f'16'
         lpr    r1,r1              ; 16 - routecode
         sll    r3,0(R1)           ; and shift that many pos to left
         or     r2,r3              ; update accumulator
         stcm   r2,B'0011',wto_rout ; save in plist
prc_ok   cli    *,x'95'            ; set cc .eq. 0
         lm     r0,r14,save_psp
         br     r14
prc_nok  cli    *,x'93'            ; set cc .ne. 0
         lm     r0,r14,save_psp
         br     r14
         SPACE  3
*--------------------------------
* process desc= parameter
*--------------------------------
process_desc    ds 0h
         stm    r0,r14,save_psp
         tm     @desc,L'@desc
         BO     prd_nok            ; 2nd time
         oi     @desc,L'@desc      ; set a flag
prd_loop ds     0H
         bal    r14,get_next       ; next routing code value
         bnz    prd_nok            ; errors
         ltr    r1,r1              ; result=0?
         bz     prd_ok             ; yes, all processed, cc=0
* we dont support desc >13 or zero
         c      r1,=f'13'
         bh     prd_nok            ; too big
         slr    r2,r2              ; prepare
         icm    r2,b'0011',wto_desc ; accumulator
         la     r3,1               ; bit to shift
         s      r1,=f'16'
         lpr    r1,r1              ; 16 - desc
         sll    r3,0(R1)           ; and shift that many pos to left
         or     r2,r3              ; update accumulator
         stcm   r2,B'0011',wto_desc ; save in plist
         slr    r1,r1              ; set cc=0
prd_ok   cli    *,x'95'            ; set cc .eq. 0
         lm     r0,r14,save_psp
         br     r14
prd_nok  cli    *,x'93'            ; set cc .ne. 0
         lm     r0,r14,save_psp
         br     r14
         SPACE  3
*----------------------------------------------
* process reply=yes parameter
*  r5 = parm size
*  r6 - parm address, no parens anymore
*
* only accept yes or no , y or n as well.
*
*----------------------------------------------
process_reply   ds 0h
         stm    r0,r14,save_psp
         c      r5,=f'3'           ; too long?
         bh     prr_nok            ; yes
         c      r5,=f'1'
         bl     prr_nok
         sll    r5,2               ; times 4 for branch table
         b      prr_what(r5)       ;
* branch table
prr_what b      prr_nok            ; r5=0
         b      prr_yn             ; r5 = 1, Y or N
         b      prr_no             ; r5 = 2, NO
         b      prr_yes            ; r5 = 3, YES
*
* REPLY=(Y) or REPLY=(N) was specified (maybe)
*
prr_yn   ds     0h
         cli    0(r6),c'Y'
         be     prr_set_yes
         cli    0(r6),c'N'
         be     prr_set_no
         b      prr_nok            ; wrong, need Y or N
*
* REPLY=(YES) was specified (maybe)
*
prr_yes  ds     0h
         clc    0(3,r6),=c'YES'    ; the only one 3 bytes long
         be     prr_set_yes
         b      prr_nok
*
* REPLY=(NO) was specified (maybe)
*
prr_no   ds     0h
         clc    0(2,r6),=c'NO'     ; the only one 2bytes long
         bne    prr_nok
*
* REPLY=(NO) desired (default). Will use WTO.
*
prr_set_no  ds     0h
         tm     @reply,L'@reply    ; 2nd time?
         bo     prr_nok
         b      prr_ok             ; flag is not set already
*
* REPLY=(YES) desired. Will use WTOR.
*
prr_set_yes ds     0h
         tm     @reply,L'@reply    ; 2nd time?
         bo     prr_nok
         oi     @reply,l'@reply    ; else set flag
prr_ok   cli    *,x'95'            ; set cc .eq. 0
         b      prr_both
prr_nok  cli    *,x'93'            ; set cc .ne. 0
prr_both lm     r0,r14,save_psp
         br     r14
*

*-------------------------------------------------------------
* Get next subparm from values separated by commas,
*  values all numeric, cannot be zero, result is converted
*  to binary and returned in r1.
*
*
* R5 - length to scan
* r6 - addr
*
* if there is nothing more to return - r1 is set to 0
*
* bad data - cc .ne. 0 is set, else cc=0
*
* r14 - linkage reg
*
*-------------------------------------------------------------
get_next  ds   0H
         ltr   r5,r5              ; any data left?
         bz    gn_eof             ; no, leave
         lr    r2,r6              ; copy start address
gtn_0    ds    0H
         cli   0(r2),c','
         be    gn_got
         cli   0(r2),c'0'         ; validate data
         bl    gn_nok             ; less than 0
         cli   0(r2),c'9'         ; validate data
         bh    gn_nok             ; or more than 9
         la    r2,1(,r2)          ; next position
         bct   r5,gtn_0           ; scan
         la    r5,1               ; to compensave for bctr later
* r2 at next byte after kwrd
gn_got   ds    0H
         lr    r3,r2              ; save addr
         sr    r2,r6              ; compute size
         lr    r1,r6              ; start address for conversion
         la    r6,1(,r3)          ; either after comma or useless
         bctr  r5,0               ; - 1 = size left or 0
*
* now: r2 - size to convert, r1-address
*
         c     r2,=f'2'           ; more than 2 digits?
         bh    gn_nok             ; cannot be
         xc    cvtdec,cvtdec      ; for debugging
         bctr  r2,0               ; -1
         b     *+10               ; ---always around---+
         pack  cvtdec,0(0,r1)     ; *** executed ***   |
         ex    r2,*-6             ; <------------------+
         cvb   r1,cvtdec          ; convert to bin
         b     gn_ok

gn_nok   cli  *,x'93'             ; cc .ne. 0 bad data
         br   r14

gn_eof   slr  r1,r1               ; nothing to process anymore
gn_ok    cli  *,x'95'             ; cc=0 good return
         br   r14
         SPACE 2
********************************************
* Parms table:
*  al2   keyword size
*  al4   processing routine address
*  cl14  keyword
*
********************************************
parmtab  ds    0H
         dc    al2(9),al4(process_routcde),CL14'ROUTCDE=('
ptel     equ   *-parmtab             ; entry length
         dc    al2(6),al4(process_desc),CL14'DESC=('
         dc    al2(7),al4(process_reply),CL14'REPLY=('    ; for wtor
         dc    al2(0)                ; last entry
         EJECT ,
*
*--------------------------------------------------------------------*
* Incorrect call - arguments missing or wrong.
* Set rc to 8 and issue error message
*--------------------------------------------------------------------*
INCORARGS DS   0H
         LA    R1,ERM001          ; issue error message
         BAL   R14,issue_error    ; ...
         MVI   KCOTH+4,C'8'       ; rc=8
         B     EXIT               ; Return to caller.
         SPACE 2
************************************************
* issue error message
*  R1 - error message address
*    first 4 bytes of the message is text size.
************************************************
issue_error ds 0h
        stm  r0,r14,save_say

* set up irxsay plist
         LA    R2,KCWRITEERR      ; -> CL8'WRITEERR'
         ST    R2,saywr           ; 1st parm
         la    r2,astring
         st    r2,saystra         ; 2nd parm
         la    r2,lstring
         st    r2,saystrl         ; 3rd parm
         oi    saystrl,x'80'      ; is the last parm

         ICM   R0,B'1111',0(R1)   ; size is 1st 4 bytes
         LA    R1,4(,R1)          ; position at text

         st    r1,astring         ; build error message address
         st    r0,lstring         ; build error message size

         L     R0,ENV             ; Optional environment block address
         LA    R1,say             ; IRXSAY plist
         L     R15,ZZZSAY         ; Saved address
         BALR  R14,R15            ; Go there
*
         lm   r0,r14,save_say
         br   r14                 ; back to caller
*
*--------------------------------------------------------------------*
*                    EXIT
*--------------------------------------------------------------------*
EXIT     DS    0H
*
* Allocate EVALBLOCK if needed and move the result data there
*
         LA    R1,RLTSUB$         ; RLTSUB plist
         L     R15,=V(RLTSUB)     ; Routine address
         BALR  R14,R15            ; Call it
*
* Rexx will set the result.
*
EXIT0    LGN@RET RC=RETCODE       ; Return code
         EJECT ,
*--------------------------------------------------------------------*
*     CONSTANTS AND WORK AREAS
*--------------------------------------------------------------------*
KCEXCOM  DC    CL8'IRXEXCOM'      ; Need for the call to IRXEXCOM
KCREPLY  DC    CL5'REPLY'         ; Variable name to be set
KCWRITEERR DC  CL8'WRITEERR'      ; For IRXSAY
blanks   dc    cl80' '              ; handy
KCOK     DC    AL4(KCOKE-KCOK-4)    ; Result length
         DC    X'F0'                ; C'0'
KCOKE    EQU   *
*
* Misc values for WTO macro
*
MCSFLAG  DC    B'1000000000000000'      MCSFLAGS
*
XFFS     DC    X'FFFFFFFF'       ; to test for args
*
* Error messages
*
ERM001 DC AL4(LERM001),C'RXWTO001E Incorrect argument(s)'
LERM001 EQU *-ERM001-4
*
ERM002 DC AL4(LERM002),C'RXWTO002E Error from WTO macro'
LERM002 EQU *-ERM002-4
*
ERM003 DC AL4(LERM003),C'RXWTO003E Error from WTOR macro'
LERM003 EQU *-ERM003-4
*
* Translate to uppercase
*
         DS    0D
UPPER    DC    256AL1(*-UPPER)
         ORG   UPPER+C'a'
         DC    C'ABCDEFGHI'
         ORG   UPPER+C'j'
         DC    C'JKLMNOPQR'
         ORG   UPPER+C's'
         DC    C'STUVWXYZ'
         ORG   ,
         DS    0D
         LTORG
*--------------------------------------------------------------------*
*                    DSECTS
*--------------------------------------------------------------------*
*
* WORKAREA DSECT. R13 points to it.
*
WORKAREA DSECT
SAVEAREA DS    18F                ; Registers save area
RETCODE  DS    F                  ; Retcode - 0
save_process_parm ds 16f          ; save area for process_parm
save_psp          ds 16f          ; subparm save area
save_say          ds 16f
cvtdec   ds    d                  ; work area for conversion
*
* Plist to call RLTSUB
*
RLTSUB$  RLTPLST DSECT=NO
*
* Do not change the order of the next 2 fields.
*
LP       DS    F                  ; Length of parameter
AP       DS    F                  ; Address of parameter
*
* This is a return value (RC or RETCODE) for this function.
*
* RC is set to 8 if error occurs - incorr argument, wto, wtor.
*
KCOTH    DS    F                  ; size
         DS    X                  ; Last byte of retcode in hex
LKCOTH   EQU   *-KCOTH
*
* Flag to mark misc options.
*
FLAG     DS    X'00'
*@TEXT   EQU   FLAG,X'80'         ; message  parameter processed
@ROUTCDE EQU   FLAG,X'40'         ; ROUTCDE= parameter processed
@DESC    EQU   FLAG,X'20'         ; DESC=    parameter processed
@REPLY   EQU   FLAG,X'10'         ; REPLY=   parameter processed

**************************************************
* WTO macro plist - ROUTCDE/DESC specified or not.
**************************************************
WTO_PL   DS    0F
WTO_LEN  DS    XL2                ; text length + 4
WTO_MCS  DS    XL2                ; mcsflags
WTO_TXT  DS    CL120' '           ; room for a message
         DS    XL8                ; just a placeholder
WTO_DESC DS    XL2                ; descriptor codes
WTO_ROUT DS    XL2                ; routing codes
*
***************************************************
* WTOR macro plist - ROUTCDE/DESC specified or not.
***************************************************
WTOR_PL  DS    0F
WTOR_RA  DS    A                  ; reply address+x'80000000'
WTOR_EA  DS    A                  ; ecb address
WTOR_RL  DS    X                  ; reply length
WTOR_LEN DS    XL1                ; text length + 4
WTOR_MCS DS    XL2                ; mcsflags
WTOR_TXT DS    CL120' '           ; room for a message
         DS    XL8                ; just a placeholder
WTOR_DESC EQU  WTO_DESC,2         ; descriptor codes, copied after msg
WTOR_ROUT EQU  WTO_ROUT,2         ; routing codes
*
reply ds cl120' '                 ; area for reply from operator
reply_length equ l'reply
*
wtor_ecb ds    f                  ; ecb for wtor macro
*
zzzexcom ds    f                  ; irxexcom address from irxexte
zzzsay   ds    f                  ; irxsay   address from irxexte
*
* irxexcom  plist
*
EXCOM    DS    0D                 ; IRXEXCOM plist
EXCOMP1  DS    F                  ; Points to cl8'IRXEXCOM'
EXCOMP2  DS    F                  ; Should be 0.
EXCOMP3  DS    F                  ; Should be 0.
EXCOMP4  DS    F                  ; Point to first SHVBLOCK
         ORG   EXCOMP4
         DC    X'80',AL3(0)       ; Last parameter
         ORG   ,
*
* irxsay plist
*
say      ds    0d
saywr    ds    a                  ; ptr to write/writeerr
saystra  ds    a                  ; ptr to a(string)
saystrl  ds    a                  ; ptr to F'string_length'
         org   saystrl
         DC    X'80',AL3(0)       ; Last parameter
         ORG   ,
astring  ds    a                  ; a(string)
lstring  ds    f                  ; length of string
*
         DS    0D
SHVB     DS    XL(SHVBLEN)'00'    ; Place for SHVBLOCK
*----------------
         DS    0D
WORKLEN  EQU   *-WORKAREA
*--------------------------------------------------------------------*
         YREGS
         PRINT ON
*--------------------------------------------------------------------*
* REXX MACROS.
*--------------------------------------------------------------------*
         IRXENVB                  ; Environment block (R0 on entry)
         IRXEFPL DSECT=YES        ; External function plist (R1)
         IRXARGTB                 ; Map the argument list.
         IRXSHVB                  ; Shared variables block
         IRXEVALB                 ; EVALBLOCK to return result.
         IRXEXTE                  ; External entry points
         END
