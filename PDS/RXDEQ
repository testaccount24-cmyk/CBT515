RXDEQ       TITLE 'Issue DEQ from REXX for a single resource'
RXDEQ       AMODE 31
RXDEQ       RMODE ANY
*----------------------------------------------------------------------
* When called as an external rexx subroutine this program will
*  issue DEQ for a specified (single) resource.
*  *** it is practically the same as RXENQ program ***
*
*
* Multiple resource specification (as in DEQ macro) is not supported.
*  Also UCB-related parameters are not supported.
*
*
*   R15 is always set to 0; if arguments are missing or
*      something equally ugly happened, it is set to 1,
*      therefore exec terminates;
*
*   Result is set to a return code from DEQ macro.
*
*   Parameters:
*      1st - qname, truncated or padded to 8 bytes (major name).
*            *** no defaults ***
*      2nd - rname (minor name). from 1 to 255 chars long, taken as
*            supplied. leading/trailing blanks are not removed.
*            *** no defaults ***
*      3rd - either of the three:
*              STEP    - address space scope
*              SYSTEM  - more than one address space scope
*              SYSTEMS - more than one system        scope
*            *** STEP is a default ***
*      4th - either of the five:
*              RET=HAVE   - conditional control
*              RET=NONE   - unconditional request, note that will
*                           abend if not satisfied. x'130', I think
*            *** RET=NONE is a default as in DEQ macro ***
*      5th - either of the two:
*              RNL=YES
*              RNL=NO
*            *** RNL=YES is a default as in DEQ macro ***
*
*   Examples:
*    result = RXDEQ('XXXCMD','XXXCMD','SYSTEMS','RET=HAVE');
*   As is customary in rexx, optional arguments can be omitted,
*    for example:
*    result = RXDEQ('XXXCMD','XXXCMD',,'RET=HAVE');
* this results in scope being STEP (default).
*
* Note that this function can be used standalone as well as a part
* of rexx function package
*
* Also note that DEQ plist is hand-built and only single resource
*  is supported.
*
* Parameters for DEQ must match exactly with parameters for
*  corresponding ENQ macro.
*
* Flag bits specification (non-auth form of macro),
*  (determined after assembly of misc macros)
*
* PELFLG2:
*    x'80'       - last arg specification
*    x'40'       - rnl=yes    makes it x'c0' = 192
*    x'04'       - rnl=no     makes it x'84' = 132
*
* PELFLAG:
*    x'40'       - SYSTEM
*    x'48'       - SYSTEMS
*    x'01'       - HAVE
*
*
*04/2001 Alex Brodsky
*----------------------------------------------------------------------
RXDEQ    LGN@ENT   CSECT
*already LM    R0,R1,20(R1)       ; Restore ENVB and EFPL pointers
         ST    R0,ENV             ; Save it for calls to rexx services
         SPACE 3
START    DS    0H
         LR    R9,R1              ; Get the EFPL address
         USING EFPL,R9            ; Extended function plist
*------------------------------------------------------
* Get the address of IRXEXCOM and IRXSAY from IRXEXTE
*------------------------------------------------------
         L     R1,ENV             ; ENVBLOCK address
         L     R1,ENVBLOCK_IRXEXTE-ENVBLOCK(,R1) ; IRXEXTE address
         USING IRXEXTE,R1         ; Tell assembler
         MVC   ZZZEXCOM(4),IRXEXCOM ; Var access routine
         MVC   ZZZSAY(4),IRXSAY     ; say routine
         DROP  R1
         SPACE 3
*--------------------------------------------------------------------*
* Initialize all the necessary plists.
*--------------------------------------------------------------------*
*. Init the EVALBLOK.
*.  Move an address of a result string in the
*.   RESULT variable.
*.  RLTSUB routine code will set the RESULT with whatever
*.   is pointed to by 'RESULT' variable
*.
         L     R2,EFPLEVAL        ; Get the EVALBLOCK address
         ST    R2,EVB             ; Save it for exit routine.
         MVC   KCOTH(LKCOK),KCOK  ; Init the retcode result
         LA    R2,KCOTH           ; Point to retcode from WTO
         ST    R2,RESULT          ; ...
*
         mvc   qname(8),blanks    ; init qname

*--------------------------------------------------------------------*
* Now look at arguments passed by the caller.
*  If argument is not supploed (pointer is zero) or
*  missing entirely (we hit the fence, 8X'FF'), we will issue
*  a message and exit this function.
*--------------------------------------------------------------------*
         L     R4,EFPLARG         ; Pointer to arguments
         USING ARGTABLE_ENTRY,R4  ; Map the entry
         CLC   0(8,R4),=XL8'FFFFFFFFFFFFFFFF' ; end of ARGTABLE?
         BE    bad_qname          ; No arguments.
* ARG 1 - qname. must be present and no more than 8 bytes
         ICM   R3,B'1111',ARGTABLE_ARGSTRING_PTR ; Get the address
         BNP   bad_qname          ; Wrong!
         ST    R3,AP              ; Save the address
         ICM   R3,B'1111',ARGTABLE_ARGSTRING_LENGTH ; Get the length
         BNP   bad_qname          ; Wrong!
         ST    R3,LP              ; Save the length
         LA    R4,ARGTABLE_NEXT   ; Adjust base - next entry
*
         C     R3,=F'8'           ; cannot be more
         BH    bad_qname          ; terminate exec
         L     R2,AP              ; get qname address
         BCT   R3,*+10            ; --copy qname------+
         MVC   qname(0),0(R2)     ; *** executed ***  |
         EX    R3,*-6             ; <-----------------+
* qname address in plist
         LA    R0,qname
         st    r0,aqname          ; save in deq plist
***
* ARG 2 - rname. must be present and no more than 255 bytes
         CLC   0(8,R4),=XL8'FFFFFFFFFFFFFFFF' ; end of ARGTABLE?
         BE    bad_rname          ; No argument(s)
         ICM   R3,B'1111',ARGTABLE_ARGSTRING_PTR ; Get the address
         BNP   bad_rname          ; Wrong!
         ST    R3,AP              ; Save the address
         ICM   R3,B'1111',ARGTABLE_ARGSTRING_LENGTH ; Get the length
         BNP   bad_rname          ; Wrong!
         ST    R3,LP              ; Save the length
         LA    R4,ARGTABLE_NEXT   ; Adjust base - next entry
*
         C     R3,=F'255'         ; cannot be more
         BH    bad_rname          ; terminate exec
         stc   r3,PELMILEN        ; else save in deq plist
         L     R2,AP              ; get rname address
         BCT   R3,*+10            ; --copy rname------+
         MVC   rname(0),0(R2)     ; *** executed ***  |
         EX    R3,*-6             ; <-----------------+
* rname address in plist
         LA    R0,rname
         st    r0,arname          ; save in deq plist
***
***
*** other args can be defaulted.
***  set plist to use same defaults as DEQ macro.
***    STEP              no flags
***    RET=NONE          no flags
***    RNL=YES
         MVI   PELFLG2,192        ; rnl=yes, last arg list.
***
***
         SPACE 2
         LA    R5,3               ; 3 more args
* ARG 3-5 - Can be either STEP/SYSTEM/SYSTEMS/RET=whatever/RNL=
test_next_arg ds 0h
         CLC   0(8,R4),=XL8'FFFFFFFFFFFFFFFF' ; end of ARGTABLE?
         BE    issue_deq          ; Use default for others
         ICM   R3,B'1111',ARGTABLE_ARGSTRING_PTR ; Get the address
         BNP   jna                ; Appears missing, check next
         ST    R3,AP              ; Save the address
         ICM   R3,B'1111',ARGTABLE_ARGSTRING_LENGTH ; Get the length
         BNP   jna                ; Appears missing, check next
         ST    R3,LP              ; Save the length
         BAL   R7,process_parm    ; look at it
         BNZ   bad_other          ; error
jna      LA    R4,ARGTABLE_NEXT   ; Adjust base - next entry
         BCT   R5,test_next_arg   ; and look at it.
**
         DROP  R4                 ; ARGTABLE_ENTRY
         DROP  R9                 ; EFPL
*=================================================================
issue_deq ds 0H
         DEQ   MF=(E,DEQ_PL)
         LTR   R15,R15
         BZ    EXIT               ; no errors, exit to caller
** multiple args are not supported
         SLR   R1,R1              ; Prepare
         IC    R1,3(,R15)         ; get the retcode (RELRET?)
** convert retcode to printable and set rc variable.
cvtretcode  ds    0h
         LA    R0,16              ; max size
         BAL   R8,CVTBDS          ; convert to printable
         B     EXIT
         EJECT
*--------------------------------
* Process the parm
*  AP  - parm address
*  LP  - parm length
*  R7  - linkage register
*
*--------------------------------
process_parm ds 0H
         stm   r0,r14,save_process_parm
         lm    r5,r6,lp            ; parm length and address
*
         LTR   R5,R5              ; Get length of the field
         BZ    pp_end_nok         ; Invalid size
*
* Uppercase the parm.
*
         BCT   R5,*+10            ; ----->-------------+
         TR    0(0,R6),UPPER      ; *** executed ***   |
         EX    R5,*-6             ; <------------------+
         LA    R5,1(,R5)          ; restore r5
*
         LA    R1,parmtab
         using pt,r1              ; map the entry
ploop    ds    0H
         icm   r2,B'1100',ptks    ; kwrd  size
         BZ    pp_end_nok         ; last entry, bad keyword
         SRL   r2,16              ; into low order bytes
         cr    r5,r2              ; should be exact size there
         bne   ploop_next         ; no. get next parmtab entry
         BCT   r2,*+10            ; --lookup in table--+
         CLC   0(0,R6),ptval      ; *** executed ***   |
         ex    R2,*-6             ; <------------------+
         be    kwrd_found         ; found this keyword
ploop_next ds  0H
         la    r1,ptel(,R1)
         B     ploop              ; keep searching the table
*
kwrd_found ds 0H
         ICM   r15,B'1111',ptpr    ; routine address
         Balr  r14,r15            ; call it
         bz    pp_end_ok
pp_end_nok ds 0h
         Cli  *,x'93'              ; cc .ne. 0
         b   pp_end               ; and leave
pp_end_ok ds 0h
         cli  *,x'95'              ; cc=0
pp_end   ds   0H
         lm    r0,r14,save_process_parm
         br    r7                  ; back to caller
         drop  r1                 ; un_map the entry
*---------------------------------------
* Processing routines for each keyword
*
*  r1 = table entry for the parm
*
*  r14 - linkage
*
*---------------------------------------
p_scope ds 0h
p_ret   equ p_scope
p_rnl   equ p_scope
         stm    r0,r14,save_psp
         using pt,r1              ; map the entry
*
* see if dupl parm
*   I think there is a new instr to do that.
*
*
         slr   r3,r3              ; prepare
         ic    r3,ptseq

         b     *+8
         tm    dupparm,x'00'
         ex    r3,*-4
         bo    ps_nok              ; duplicate parm

         ic    r3,ptseq+1
         b     *+8
         tm    dupparm+1,x'00'
         ex    r3,*-4
         bo    ps_nok              ; duplicate parm
ps_u     ds     0h                 ; unique parm
         clc    ptval(3),=cl3'RNL' ; rnl processing?
         bne    ps_not_rnl         ; no, set flag
         mvc    pelflg2(1),ptpfc   ; for rnl set pelflg2 flag.
         b     ps_ok
ps_not_rnl ds 0h
         ic    r3,ptpfc            ; flag value
         b     *+8
         oi    pelflag,x'00'
         ex    R3,*-4              ; set the flag in deq plist
         b     ps_ok
ps_ok    cli    *,x'95'            ; set cc .eq. 0
         lm     r0,r14,save_psp
         br     r14
ps_nok   cli    *,x'93'            ; set cc .ne. 0
         lm     r0,r14,save_psp
         br     r14
         drop  r1                 ; un_map the entry
         SPACE  3
********************************************
* Parms table:
*  al2   keyword size
*  al4   processing routine address
*  al2   flag offset in plist
*  al1   flag value
*  al2   value flag for duplicates test
*  cl12  keyword
*
********************************************
parmtab  ds    0H
 dc al2(4),al4(p_scope)
 DC al2(PELFLAG-DEQ_PL),AL1(@STEP),XL2'8000',CL12'STEP'
*
 dc al2(6),al4(p_scope)
 dc al2(PELFLAG-DEQ_PL),AL1(@SYSTEM),XL2'4000',CL12'SYSTEM'
*
 dc al2(7),al4(p_scope)
 dc al2(PELFLAG-DEQ_PL),AL1(@SYSTEMS),XL2'2000',CL12'SYSTEMS'
*
 dc al2(8),al4(p_ret)
 dc al2(PELFLAG-DEQ_PL),AL1(@HAVE),XL2'0800',CL12'RET=HAVE'
*
 dc al2(8),al4(p_ret)
 dc al2(PELFLAG-DEQ_PL),AL1(@NONE),XL2'0100',CL12'RET=NONE'
*
 dc al2(7),al4(p_rnl)
 dc al2(PELFLG2-DEQ_PL),AL1(192),XL2'0080',CL12'RNL=YES'
*
 dc al2(6),al4(p_rnl)
 dc al2(PELFLG2-DEQ_PL),AL1(132),XL2'0040',CL12'RNL=NO'
         dc    al2(0)                ; last entry
         EJECT ,
*--------------------------------------------------------------------*
* Incorrect call - arguments missing or wrong.
*--------------------------------------------------------------------*
bad_qname DS   0H
         LA    R1,ERM001          ; issue error message
         B     incorargs          ; ...
         SPACE 1
bad_rname DS   0H
         LA    R1,ERM002          ; issue error message
         B     incorargs          ; ...
         SPACE 1
bad_other   ds 0H
         LA    R1,ERM004          ; issue error message
         B     incorargs          ; ...
         SPACE 1
INCORARGS DS   0H
         BAL   R14,issue_error    ; ...
**       MVI   KCOTH+4,C'8'       ; rc=8
         MVC   RETCODE(4),=F'1'   ; terminate the exec.
         B     EXIT               ; Return to caller.
         SPACE 2
************************************************
* issue error message
*  R1 - error message address
*    first 4 bytes of the message is text size.
************************************************
issue_error ds 0h
        stm  r0,r15,save_say

* set up irxsay plist
         LA    R2,KCWRITEERR      ; -> CL8'WRITEERR'
         ST    R2,saywr           ; 1st parm
         la    r2,astring
         st    r2,saystra         ; 2nd parm
         la    r2,lstring
         st    r2,saystrl         ; 3rd parm
         oi    saystrl,x'80'      ; is the last parm

         ICM   R0,B'1111',0(R1)   ; size is 1st 4 bytes
         LA    R1,4(,R1)          ; position at text

         st    r1,astring         ; build error message address
         st    r0,lstring         ; build error message size

         L     R0,ENV             ; Optional environment block address
         LA    R1,say             ; IRXSAY plist
         L     R15,ZZZSAY         ; Saved address
         BALR  R14,R15            ; Go there
*
         lm   r0,r15,save_say
         br   r14                 ; back to caller
*--------------------------------------------------------------------
* Convert to printable dec, remove leading blanks after conversion.
*   R1 - value to convert
*   R0 - output size
*--------------------------------------------------------------------
CVTBDS   DS    0H
         LR    R15,R0              ; Size
         IC    R3,=C' '            ; sign if positive or 0
         LTR   R1,R1               ; is it?
         BNM   CVTBDS_01            ; yes
         LPR   R1,R1               ; make positive
         IC    R3,=C'-'            ; sign if negative
CVTBDS_01 DS    0H
         CVD   R1,DWORD            ; -> decimal
         MVC   DECCVT(L'PATTERN),PATTERN  ; Init
         LA  R1,DECCVT+L'PATTERN-1  ; First byte after sign. starter
*                                   ; ... (last byte of pattern)
         EDMK  DECCVT(L'PATTERN),DWORD ; convert to printable
         CLM   R3,B'0001',=C'-'
         BNE   CVTBDS_02
         BCTR  R1,0                ; byte before first non-zero
         STC   R3,0(R1)            ; sign in front
CVTBDS_02 DS    0H
* Now we move all specified data to common area, can be truncated
         C     R15,=F'16'          ; over the max?
         BNH   *+8
         LA    R15,16
*
* Compute the data size
*
         LA    R3,DECCVT+L'PATTERN ; Byte after last
         SR    R3,R1               ; Converted data size
*
         CR    R15,R3              ; Requested less than converted?
         BNH   *+6
         LR    R15,R3
*
         ST    R15,CVTOUT          ; Save size
*
         BCT   R15,*+10
         MVC   CVTOUT+4(0),0(R1)   ; *** executed ***
         EX    R15,*-6             ; Move and trunc from the left
*
         BR    R8                  ; Done
         SPACE 3
*
*
*--------------------------------------------------------------------*
*                    EXIT
*--------------------------------------------------------------------*
EXIT     DS    0H
*
* Allocate EVALBLOCK if needed and move the result data there
*
         LA    R1,RLTSUB$         ; RLTSUB plist
         L     R15,=V(RLTSUB)     ; Routine address
         BALR  R14,R15            ; Call it
*
* Rexx will set the result.
*
EXIT0    LGN@RET RC=RETCODE       ; Return code
         EJECT ,
*--------------------------------------------------------------------*
*     CONSTANTS AND WORK AREAS
*--------------------------------------------------------------------*
KCEXCOM  DC    CL8'IRXEXCOM'      ; Need for the call to IRXEXCOM
KCWRITEERR DC  CL8'WRITEERR'      ; For IRXSAY
blanks   dc    cl80' '              ; handy
KCOK     DC    AL4(KCOKE-KCOK-4)    ; Result length
         DC    X'F0'                ; C'0'
KCOKE    EQU   *
LKCOK    EQU   *-KCOK
*
EDMASK   DC    X'2020202020202021'
*
XFFS     DC    X'FFFFFFFF'       ; to test for args
*
* Error messages
*
ERM001 DC AL4(LERM001),C'RXDEQ001E Incorrect or missing qname'
LERM001 EQU *-ERM001-4
*
ERM002 DC AL4(LERM002),C'RXDEQ002E Incorrect or missing rname'
LERM002 EQU *-ERM002-4
*
ERM004 DC AL4(LERM004)
 DC C'RXDEQ004E Either scope, request or RNL parm is incorrect'
LERM004 EQU *-ERM004-4
*
* Translate to uppercase
*
         DS    0D
UPPER    DC    256AL1(*-UPPER)
         ORG   UPPER+C'a'
         DC    C'ABCDEFGHI'
         ORG   UPPER+C'j'
         DC    C'JKLMNOPQR'
         ORG   UPPER+C's'
         DC    C'STUVWXYZ'
         ORG   ,
         DS    0D
PATTERN  DC    CL16' '
         ORG   PATTERN
         DC    X'40',13X'20'
PSS      DC    X'2120'                 ; signif. starter
         ORG   ,
         DS    0D
         LTORG
*--------------------------------------------------------------------*
*                    DSECTS
*--------------------------------------------------------------------*
*
* WORKAREA DSECT. R13 points to it.
*
WORKAREA DSECT
SAVEAREA DS    18F                ; Registers save area
RETCODE  DS    F                  ; Retcode - 0
save_process_parm ds 16f          ; save area for process_parm
save_psp          ds 16f          ; subparm save area
save_say          ds 16f
dword    ds    d                  ; work area for conversion
cvtchar  ds    cl8                ; and to printable
dupparm  ds    xl2                ; duplicate parm flag
DECCVT   DS    CL16               ; Area for dec conversions
*
* Plist to call RLTSUB
*
RLTSUB$  RLTPLST DSECT=NO
*
* Do not change the order of the next 2 fields.
*
LP       DS    F                  ; Length of parameter
AP       DS    F                  ; Address of parameter
*
* This is a return value (RC or RETCODE) for this function.
*  supposed to be up to 8.
*
*
KCOTH    DS    F                  ; size
         DS    XL16               ; Retcode, printable.
CVTOUT   EQU   KCOTH
*
* DEQ flags definition for the flag 2.
*
@STEP    EQU   0                  ; STEP    specified
@SYSTEM  EQU   X'40'              ; SYSTEM  is specified
@SYSTEMS EQU   (X'40'+X'08')      ; SYSTEMS is specified
@HAVE    EQU   X'01'              ; RET=HAVE
@NONE    EQU   0                  ; RET=NONE

**************************************************
* DEQ macro plist  - similar to ENQ
**************************************************
DEQ_PL   DS    0F
PELFLG2  DS    AL1(0)             ; flag
PELMILEN DS    AL1(0)             ; rname length
PELFLAG  DS    AL1(0)             ; flag 2
PELRET   DS    AL1(0)             ; return code byte
AQNAME   DS    A(0)               ; qname address
ARNAME   DS    A(0)               ; rname address
*
QNAME    DS    CL8                ; place for qname
RNAME    DS    CL255              ; place for rname
zzzexcom ds    f                  ; irxexcom address from irxexte
zzzsay   ds    f                  ; irxsay   address from irxexte
*
* irxexcom  plist
*
EXCOM    DS    0D                 ; IRXEXCOM plist
EXCOMP1  DS    F                  ; Points to cl8'IRXEXCOM'
EXCOMP2  DS    F                  ; Should be 0.
EXCOMP3  DS    F                  ; Should be 0.
EXCOMP4  DS    F                  ; Point to first SHVBLOCK
         ORG   EXCOMP4
         DC    X'80',AL3(0)       ; Last parameter
         ORG   ,
*
* irxsay plist and pointers --------------------------------+
*                                                           |
say      ds    0d                                           |
saywr    ds    a                  ; ptr to write/writeerr   |
saystra  ds    a                  ; ptr to a(string)        |
saystrl  ds    a                  ; ptr to F'string_length' |
         org   saystrl                                      |
         DC    X'80',AL3(0)       ; Last parameter          |
         ORG   ,                                            |
astring  ds    a                  ; a(string)               |
lstring  ds    f                  ; length of string        |
* <---------------------------------------------------------+
         DS    0D
SHVB     DS    XL(SHVBLEN)'00'    ; Place for SHVBLOCK
*----------------
         DS    0D
WORKLEN  EQU   *-WORKAREA
*--------------------------------------------------------------------*
*
* Map parm table entry
*
pt     dsect
ptks   ds   al2             ; kwrd size in table
ptpr   ds   al4             ; processing routine
ptpfd  ds   al2             ; flag displ
ptpfc  ds   al1             ; flag value
ptseq  ds   al2             ; flags for dups check
ptval  ds   cl12            ; kwrd value
ptel     equ   *-pt                  ; entry length
*
         YREGS
         PRINT ON
*--------------------------------------------------------------------*
* REXX MACROS.
*--------------------------------------------------------------------*
         IRXENVB                  ; Environment block (R0 on entry)
         IRXEFPL DSECT=YES        ; External function plist (R1)
         IRXARGTB                 ; Map the argument list.
         IRXSHVB                  ; Shared variables block
         IRXEVALB                 ; EVALBLOCK to return result.
         IRXEXTE                  ; External entry points
         END
