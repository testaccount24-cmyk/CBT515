LGNSPF      TITLE 'Rexx function to return ISPF parms for LOGON proc'
LGNSPF      AMODE 31
LGNSPF      RMODE ANY
*----------------------------------------------------------------------
LGNSPF   LGN@ENT  CSECT
*
* End of housekeeping statements.
*
START    DS    0H
         ST    R0,ENV            ; save ENVB ptr
         LR    R9,R1             ; Get the EFPL address
         USING EFPL,R9           ; Extended function plist
*
* Init IRXEXCOM plist
*
         LA    R2,KCEXCOM        ; Get the character ID
         ST    R2,EXCOMP1        ; Save as first parm address
         XC    EXCOMP2(L'EXCOMP2+L'EXCOMP3),EXCOMP2 ; Make them 0
         LA    R2,SHVB            ; Get the SHVBLOCK address
         ST    R2,EXCOMP4         ; Save as a fourth argument
         OI    EXCOMP4,X'80'      ; Flag the fourth as a last arg
*
* Init SHVBLOCK's.
*
         LA    R2,UVARCNT         ; that many vars to set
         LA    R3,SHVB            ; Get to the first block
         USING SHVBLOCK,R3        ; Tell assembler
         LA    R4,UVART           ; vars table
         USING DUVART,R4          ; map it as well
LP01     DS    0H
         XC    SHVBLOCK(SHVBLEN),SHVBLOCK ; Init to zeros.
         LA    R1,SHVBLEN(,R3)    ; Next block address
         ST    R1,SHVNEXT         ; chain them together
*        XC    SHVNEXT(4),SHVNEXT ; Zero for the last block
*        XC    SHVUSER(4),SHVUSER ; No user info
         LA    R1,DUVAR           ; var name address
         ST    R1,SHVNAMA         ; ...
         MVC   SHVNAML+2(2),DUVARL ; Set the var name length
         MVI   SHVCODE,SHVSTORE   ; Uppercase 'S' for SET
         LA    R3,SHVBLEN(,R3)    ; Next block
         LA    R4,UVARTSZ(,R4)    ; Next rexx var descriptor
         BCT   R2,LP01            ; init all blocks
         S     R3,=A(SHVBLEN)     ; Prev block
         XC    SHVNEXT(4),SHVNEXT ; Zero for the last block
         DROP  R3                 ; shvblock
         DROP  R4                 ; var table
*
* Init result string. Exit code will set the result to
*  whatever is pointed to by 'RESULT' variable.
*
* Look at RLTPLST macro for the format of RESULT variable
*
         L     R1,EFPLEVAL        ; Get the evalblock address
         ST    R1,EVB             ; save it for exit routine
         LA    R1,KCOK            ; result=0
         ST    R1,RESULT          ; for a good return
*
* Now look at REXX input args, should be one.
*
         MVC   KEY(7),BLANKS      ; prepare
*--------------------------------------------------------------------*
* Now look at arguments passed by the caller.
*  We only need one argument.
*
*  If argument is not supplied (pointer is zero) or
*  missing entirely (we hit the fence, 8X'FF'), we move RC=16
*  the result area and exit the function.
*
*  At this time extra arguments are ignored.
*
*--------------------------------------------------------------------*
         L     R4,EFPLARG         ; Pointer to the arguments
         USING ARGTABLE_ENTRY,R4  ; Map the entry
         ICM   R2,B'1111',ARGTABLE_ARGSTRING_PTR ; Get the address
         BNP   INCORARGS          ; Wrong!
         ICM   R3,B'1111',ARGTABLE_ARGSTRING_LENGTH ; Get the length
         BNP   INCORARGS          ; Wrong!
**       LA    R4,ARGTABLE_NEXT   ; Adjust the base - next entry
         DROP  R4                 ; ARGTABLE_ENTRY
*
* Make sure that the entry is no more than 7 chars long
*
         C     R3,=F'7'           ; ???
         BH    INCORARGS          ; too long
         BCT   R3,*+10            ; around instr
         MVC   KEY(0),0(R2)       ; *** executed ***
         EX    R3,*-6             ; fill up the search key

*
* Get the address of IRXEXCOM from IRXEXTE
*
         L     R1,ENV             ; ENVBLOCK address
         L     R1,ENVBLOCK_IRXEXTE-ENVBLOCK(,R1) ; IRXEXTE address
         USING IRXEXTE,R1         ; Tell assembler
         MVC   ZZZEXCOM(4),IRXEXCOM ; Var access routine
         DROP  R1
*
*----------------------------------------------------------------
*  Binary search for the key in pre-built table.
*    Table is sorted at generation time by the macro.
*  *** this is a search for exceptions using full parameter,
*  *** that is probably a userid.
*----------------------------------------------------------------
         OI    EXCEPTIONS,L'EXCEPTIONS  ; mark the first path
         L     R10,LGNUDEFE      ; table pointer - exceptions
*
* Here twice, if exception is not located, then entered for
*   defaults table search.
*
ISEARCH  DS    0H
         LM    R5,R8,0(R10)      ; get the header values.
         LGNSRCH (R5),           ; address of a table                  *
               LAST=(R6),        ; last entry address                  *
               LV=(R7),          ; length of each entry                *
               KEY=KEY,          ; search key                          *
               NONE=NOT_FOUND_E, ; if key not found in table           *
               FOUND=FOUND,      ; if key is found  in table           *
               KLV=(R8),         ; key length                          *
               KEYOFF=0,         ; key offset                          *
               SEQ=A             ; sorted in ascending seq
*
* Keyword not found in exception table.
*   Now we will search in the defailts table, made up from the
*    first letter of a userid.
*
NOT_FOUND_E DS 0H
         TM    DEFAULTS,L'DEFAULTS  ; defaults?
         BO    NOT_FOUND            ; Yes, could not find an entry
         MVC   KEY+1(L'KEY-1),BLANKS ; leave only 1st letter
         NI    EXCEPTIONS,255-L'EXCEPTIONS
         OI    DEFAULTS,L'DEFAULTS  ; now looking for defaults
         L     R10,LGNUDEFD      ; table pointer - defaults
         B     ISEARCH           ; and look up again
*
* Keyword found in a table, R1 points to entry there.
*  this path is taken for both defaults and exeptions.
*
FOUND     DS   0H
          LR   R2,R1
          USING DUDEF,R2          ; map table entry
*
* add info to SHVBLOCK's.
*
         LA    R6,UVARCNT         ; that many vars to set
         LA    R3,SHVB            ; Get to the first block
         USING SHVBLOCK,R3        ; Tell assembler
         LA    R4,UVART           ; vars table
         USING DUVART,R4          ; map it as well
         SLR   R5,R5              ; Prepare
LP02     DS    0H
*
         ICM   R5,B'0011',DUVARD  ; var displacement
         LA    R1,DUDEF(R5)       ; Var address
         ICM   R5,B'0011',DUVARVL ; var size or 0
         BNZ   LP03               ; if non-zero -ok
         ICM   R1,B'1111',0(R1)   ; if zero - was a ptr to struct
         SLR   R5,R5              ; ... AL1(size),C'value'
         IC    R5,0(,R1)          ;  and get the size and
         LA    R1,1(,R1)          ;  adjust the var address
LP03     DS    0H
         ST    R1,SHVVALA         ; value address
         ST    R5,SHVVALL         ; value size
*
         LA    R3,SHVBLEN(,R3)    ; Next block
         LA    R4,UVARTSZ(,R4)    ; Next rexx var descriptor
         BCT   R6,LP02            ; add to all blocks
*
         DROP  R2                 ; table entry
         DROP  R3                 ; shvblock
         DROP  R4                 ; var table
*
* Finally, call IRXEXCOM to set all the variables
*
*
         L     R0,ENV             ; Optional environment block addr
         LA    R1,EXCOM           ; IRXEXCOM plist
         L     R15,ZZZEXCOM       ; Saved address of routine
         BALR  R14,R15            ; Go there
*        LINK  EP=IRXEXCOM,MF=(E,EXCOM) ; CALL IT.
*
* At this time we are not analyzing return code from IRXEXCOM,
*   if it is non-zero, set the routine return code to it and
*   this will result in exec termination.
*
         ST    R15,RETCODE        ; from IRXEXCOM
         B     EXIT
*
*--------------------------------------------------------------------*
*                    Exits; Retcode loaded from RETCODE
*--------------------------------------------------------------------*
NOT_FOUND DS   0H
         LA    R1,KCNFOUND        ; result=24
         ST    R1,RESULT          ; and dont set variables for now
         B     EXIT
INCORARGS DS   0H
         LA    R1,KCNARGS         ; result=16
         ST    R1,RESULT          ; and dont set variables for now
         B     EXIT
*--------------------------------------------------------------------*
*                    EXIT
*--------------------------------------------------------------------*
EXIT     DS    0H
*
* Allocate EVALBLOCK if needed and move the result data there
*
         LA    R1,RLTSUB$         ; RLTSUB plist
         L     R15,=V(RLTSUB)     ; Routine address
         BALR  R14,R15            ; Call it
*
* Rexx will set the result.
*
EXIT0    LGN@RET                  bye
         EJECT
*--------------------------------------------------------------------*
*     Constants and work areas
*--------------------------------------------------------------------*
*
BLANKS   DC    CL80' '             ; Handy
*
KCEXCOM  DC    CL8'IRXEXCOM'      ; NEED FOR THE CALL TO IRXEXCOM
*
* Return RC=16 if no arguments or incorr args.
*
KCNARGS  DC    AL4(KCNARGSE-KCNARGS-4) ; Return rc=16
         DC    C'16'
KCNARGSE EQU   *
*
* Found in a table, rexx variables set.
*
KCOK     DC    AL4(KCOKE-KCOK-4)  ; Error message length
         DC    C'0'               ; return 0
KCOKE    EQU   *
*
* Not found in a table.
*
KCNFOUND DC    AL4(KCNFOUNDE-KCNFOUND-4)  ; Error message length
         DC    C'24'
KCNFOUNDE EQU  *
*
LGNUDEFD DC    V(LGNUDEFD)         ; Parameters table - defaults
LGNUDEFE DC    V(LGNUDEFE)         ; Parameters table - exceptions
*
* map entries from the user/ispf command table
*
         LGNUDEFN VART=YES
         DS    0D
         LTORG
*--------------------------------------------------------------------*
*                    DSECTS
*--------------------------------------------------------------------*
***************************************
* Workarea dsect. R13 points to it.   *
***************************************
WORKAREA DSECT
SAVEAREA DS    18F                ; Registers save area
RETCODE  DS    F                  ; Return code
RSNCODE  DS    F                  ; Reason code
CALLPL   DS    10F                ; for Call macro
*
KEY      DS    CL7                ; search key
LGNFLG   DS    X                  ; flag
EXCEPTIONS EQU  LGNFLG,X'80'      ; processing exceptions
DEFAULTS   EQU  LGNFLG,X'40'      ; processing defaults
*
* Plist to call RLTSUB
*
RLTSUB$  RLTPLST DSECT=NO
*
ZZZEXCOM DS    F                ; IRXEXCOM address from IRXEXTE
*.
*. IRXEXCOM plist - short version.
*.
EXCOM    DS    0D                 ; IRXEXCOM plist
EXCOMP1  DS    F                  ; Points to CL8'IRXEXCOM'
EXCOMP2  DS    F                  ; Should BE 0.
EXCOMP3  DS    F                  ; Should BE 0.
EXCOMP4  DS    F                  ; Point to first SHVBLOCK
         ORG   EXCOMP4
         DC    X'80',AL3(0)       ; Last parameter
         ORG   ,
*
         DS    0D
SHVB     DS    XL(SHVBLEN*UVARCNT)'00' ; Place for SHVBLOCK's
*----------------
         DS    0D
WORKLEN  EQU   *-WORKAREA
*--------------------------------------------------------------------*
         PRINT ON
*--------------------------------------------------------------------*
* MACROS.
*--------------------------------------------------------------------*
*
* Map the entry
*
         LGNUDEFN DSECT=YES
*
         YREGS               ; Registers equates
*--------------------------------------------------------------------*
* REXX MACROS.
*--------------------------------------------------------------------*
         IRXENVB                  ; ENVIRONMENT BLOCK (R0 ON ENTRY)
         IRXEFPL DSECT=YES        ; EXTERNAL FUNCTION PLIST (R1)
         IRXARGTB                 ; MAP THE ARGUMENT LIST.
         IRXSHVB                  ; SHARED VARIABLES BLOCK
         IRXEVALB                 ; EVALBLOCK TO RETURN RESULT.
         IRXEXTE                  ; EXTERNAL ENTRY POINTS
         END
