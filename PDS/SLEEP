SLEEP       TITLE 'Wait a few seconds (or more)'
SLEEP       AMODE 31
SLEEP       RMODE ANY
*----------------------------------------------------------------------
* When called as an external rexx subroutine this program will
* wait for a given number of seconds.
*
*   R15 is always set to 0; if arguments are missing or
*      something equally ugly happened, it is set to 1,
*      therefore exec terminates;
*
*   Result is set to '0' if
*      we are terminated because if time expiration, and is
*      set to 1 if wait was terminated by attention.
*
*   Example: rc = sleep('5');
*
*
* Note that this function can be used standalone as well as a part
* of rexx function package
*
*
*03/95 Alex Brodsky
*----------------------------------------------------------------------
SLEEP       CSECT
         USING SLEEP,R15            ; ADDRESS PROGRAM.
         SAVE  (14,12),,SLEEP.ALEX.BRODSKY.&SYSDATE.&SYSTIME
         LR    R12,R15            ; SET PROGRAM BASE.
         DROP  R15
         USING SLEEP,R12            ; ADDRESS PROGRAM.
*---------------
*      ENTER AMODE 31 - not necessary, rexx runs in 31-bit mode
         L     R10,AMODES         ; SETUP FOR BSM
         L     R2,AMODES+4        ; SETUP FOR BSM
         BSM   R10,R2             ; SAVE OLD AMODE - SET AMODE31.
AMODES   DC    A(EXITX)           ; ADDRESS TO EXIT.
         DC    A(ENTRY31+X'80000000') ; ENTER ENTRY31 IN AMODE 31.
ENTRY31  DS    0H
*---------------
         LA    R0,WORKLEN         ; SET LENGTH AND
         GETMAIN R,LV=(0)         ; GET DYNAMIC SAVE AREA.
         LA    R6,0(R1)
         LA    R7,WORKLEN         ; CLEAR SAVE AREA.
         SR    R8,R8
         SR    R9,R9
         MVCL  R6,R8 .            ; CLEAR GETMAIN AREA.
         ST    R1,8(R13)          ; CHAIN SAVEAREAS.
         ST    R13,4(R1)
         LR    R13,R1
         USING WORKAREA,R13
         ST    R10,EXITMODE       ; SAVE OLD MODE AND EXIT ADDRESS.
         XC    RETCODE(4),RETCODE ; SET NORMAL RETURN CODE - 0
         L     R1,4(,R13)         ; GET TO THE PREV SAVEAREA
         LM    R0,R1,20(R1)       ; RESTORE ENVB AND EFPL POINTERS
         ST    R0,ENV             ; SAVE IT FOR CALLS TO REXX SERVICES
         SPACE 3
START    DS    0H
         LR    R9,R1              ; GET THE EFPL ADDRESS
         USING EFPL,R9            ; EXTENDED FUNCTION PLIST
*--------------------------------------------------------------------*
* INITIALIZE ALL THE NECESSARY PLISTS.
*--------------------------------------------------------------------*
*. INIT THE EVALBLOK.
*.  MOVE AN ADDRESS OF A CL1'0' RESULT STRING IN THE
*.  RESULT VARIABLE.
*.  RLTSUB routine CODE WILL SET THE RESULT WITH WHATEVER
*.  IS POINTED TO BY 'RESULT' VARIABLE.
*.
         L     R2,EFPLEVAL        ; GET THE EVALBLOCK ADDRESS
         ST    R2,EVB             ; SAVE IT FOR EXIT ROUTINE.
         LA    R2,KCOK0           ; POINT TO CL1'0'
         ST    R2,RESULT          ; ...
*
*--------------------------------------------------------------------*
* NOW LOOK AT ARGUMENTS PASSED BY THE CALLER.
*  IF ARGUMENT IS NOT SUPPLIED (POINTER IS ZERO) OR
*  MISSING ENTIRELY (WE HIT THE FENCE, 8X'FF'), WE MOVE MESSAGE TO
*  THE RESULT AREA AND EXIT THE FUNCTION.
*--------------------------------------------------------------------*
         L     R4,EFPLARG         ; POINTER TO THE ARGUMENTS
         USING ARGTABLE_ENTRY,R4  ; MAP THE ENTRY
* ARG 1 - INTERVAL, MUST BE PRESENT.
         ICM   R3,B'1111',ARGTABLE_ARGSTRING_PTR ; GET THE ADDRESS
         BNP   INCORARGS          ; WRONG!
         ST    R3,AP              ; SAVE THE ADDRESS
         ICM   R3,B'1111',ARGTABLE_ARGSTRING_LENGTH ; GET THE LENGTH
         BNP   INCORARGS          ; WRONG!
         ST    R3,LP              ; SAVE THE LENGTH
         LA    R4,ARGTABLE_NEXT   ; AJUST BASE - NEXT ENTRY
* ARG 2 - NOTHING YET. IGNORE IF SUPPLIED
         DROP  R4                 ; ARGTABLE_ENTRY
         DROP  R9                 ; EFPL
CONTINUE DS    0H
*=================================================================
* Now we will convert the input argument to binary seconds
*
         LM    R0,R1,LP           ; Get the length and address
         C     R0,=F'5'           ; Greater than 5  digits?
         BH    INCORARGS          ; Invalid length
         LTR   R2,R0              ; Get length of the field
         BZ    INCORARGS          ; Invalid size
         LR    R3,R1              ; Save the address of source
         BCT   R2,ADBTRT          ; Decr for EX and br around
DBTRT    TRT   0(0,R3),CVTXD      ; *** EXECUTED ***
ADBTRT   EX    R2,DBTRT           ; Try to find a non-digit
         BNZ   INCORARGS          ; Error, a non-decimal digit
         B     ADBPK              ; Br around executed instruction
DBPK     PACK  CVTDEC,0(0,R3)     ; *** EXECUTED ***
ADBPK    EX    R2,DBPK            ; Pack digits into packed dec
         CP    CVTDEC,=PL8'86400' ; More than 24 hours?
         BH    INCORARGS          ; Yes, too large for a register
         MP    CVTDEC,=PL4'100'   ; Need for STIMER
         CVB   R1,CVTDEC          ; Convert to binary
         ST    R1,TIMEINT         ; And save for STIMER
*=================================================================
         MVC   ECBMARK(8),=CL8'-----ECB'   ; Pointer to ECB
         LA    R3,ECB1                     ; ... for STIMERM
         STCM  R3,B'1111',ECBMARK          ; ... PARM
         LA    R3,STAXLIST     ; Load address of STAX parm
 STAX  ATTNEXIT,USADDR=ECB1,MF=(E,(3))  ; Issue STAX macro
         LA    R3,STIMER_SET_L  ; Load address of plist
         LA    R4,TIMEID
         LA    R5,TIMEINT
    STIMERM SET,ID=(4),BINTVL=(5),WAIT=NO,EXIT=TIMEEXIT,MF=(E,(3)),    *
               PARM=ECBMARK
         WAIT  1,ECB=ECB1
*
* Determine, why are we here?
*
*  We will exit with rc=1 if teminated by ATTN, else - rc=0
*
         LA    R2,KCOK1           ; POINT TO CL1'1'
         TM    ECB1+3,ATTNHIT  ; Attention termination?
         BO    CANCEL_TIMER       ; Yes
         LA    R2,KCOK0           ; POINT TO CL1'0'
         TM    ECB1+3,EXPIRED  ; Interval expired?
         BO    KILL_STAX          ; Yes
CANCEL_TIMER DS 0H
         LA    R3,STIMER_CAN_L  ; Load address of plist
         LA    R4,TIMEID
*        STIMERM CANCEL,ID=(4),MF=(E,(3)) ; Cancel the timer
KILL_STAX DS   0H
         STAX ,
         B     OUT
*=================================================================
OUT      DS    0H
         ST    R2,RESULT          ; Save result for exit routine
         B     EXIT               ; ... and go there
*--------------------------------------------------------------------*
* INCORRECT CALL - ARGUMENTS MISSING, ETC.
* SET RETCODE TO 1
*--------------------------------------------------------------------*
INCORARGS DS   0H
         MVI   RETCODE+3,1        ; GENERATE THE ERROR MESSAGE
         B     EXIT               ; RETURN TO CALLER.
*--------------------------------------------------------------------*
*                    EXIT
*--------------------------------------------------------------------*
EXIT     DS    0H
*
* Allocate EVALBLOCK if needed and move the result data there
*
         LA    R1,RLTSUB$         ; RLTSUB plist
         L     R15,=V(RLTSUB)     ; Routine address
         BALR  R14,R15            ; Call it
*
* Rexx will set the result.
*
EXIT0    DS    0H
         L     R15,RETCODE        ; GET RETURN CODE.
         L     R10,EXITMODE       ; SET FOR RETURN TO CALLER'S AMODE.
         LR    R1,R13             ; ADDRESS SAVE AREA.
         L     R13,4(,R13)        ; ADDRESS PREV SAVE AREA.
         ST    R15,16(R13)        ; SET RETURN CODE.
         LA    R0,WORKLEN         ; SET LENGTH AND
         FREEMAIN R,A=(1),LV=(0)  ; FREE WORKAREA.
         BSM   0,R10
EXITX    DS    0H
         RETURN (14,12)
         EJECT
*-----------------------------------------*
* TSO attn exit                           *
*                                         *
* Does not do much - gets the address of  *
* ECB (passed as parameter to STAX macro  *
* and POSTs it to wake up WAIT macro.      *
*
*-----------------------------------------*
ATTNEXIT DS   0H
         USING *,R15
         L     R2,8(,R1)          ; Get the USADDR
         POST  (2),ATTNHIT        ; Wake up
         BR    R14                ; Back to TSO
*-----------------------------------------*
* TSO STIMERM exit                        *
*                                         *
* Does not do much - gets the address of  *
* ECB (passed as parameter to STIMERM     *
* and POSTs it to wake up WAIT macro.      *
*
*-----------------------------------------*
TIMEEXIT DS   0H
         USING *,R15
         L     R2,4(,R1)          ; Get the PARM
         POST  (2),EXPIRED        ; Wake up
         BR    R14                ; Back to TSO
*--------------------------------------------------------------------*
*     CONSTANTS AND WORK AREAS
*--------------------------------------------------------------------*
KCOK0    DC    AL4(KCOK0E-KCOK0-4)  ; RESULT LENGTH
         DC    C'0'                 ; NO MATCH
KCOK0E   EQU   *
*
KCOK1    DC    AL4(KCOK1E-KCOK1-4)  ; RESULT LENGTH
         DC    C'1'                 ' MATCH
KCOK1E   EQU   *
*
* Translate and test table for dec to bin conversion routine
*
         DS    0D
CVTXD    DC    256AL1(1)          ; non-digits
         ORG   CVTXD+C'0'
         DC    AL1(0,0,0,0,0,0,0,0,0,0)   ; digits 0 to 9
         ORG   ,
*
         DS    0D
         LTORG
*--------------------------------------------------------------------*
*                    DSECTS
*--------------------------------------------------------------------*
*
* WORKAREA DSECT. R13 points to it.
*
WORKAREA DSECT
SAVEAREA DS    18F                ; REGISTERS SAVE AREA
EXITMODE DS    A                  ; CALLERS AMODE
RETCODE  DS    F                  ; RETCODE
*
* Plist to call RLTSUB
*
RLTSUB$  RLTPLST DSECT=NO
*
* Do not change the order of the next 2 fields.
*
LP       DS    F                  ; Length of parameter
AP       DS    F                  ; Address of parameter
*
CVTDEC   DS    D'0'               ; Work area
*
* ECB
*
ECBMARK  DC    CL8'nnnn-ECB'      ; Will be an address of ECB1
ECB1     DC    F'0'     ; ECB for the wait macro
*
* ID for the STIMER macro
*
TIMEID   DC    A(1)
*
* Interval timer wait (in seconds).
*
TIMEINT  DC    A(10*100)
*
* STAX macro plist
*
STAXLIST STAX  ATTNEXIT,MF=L
*
* Stimer set plist
*
STIMER_SET_L STIMERM SET,MF=L
STIMER_CAN_L STIMERM CANCEL,MF=L
BP       DS    CL1      ; BYTE OF PATTERN
BP1      DS    CL1      ; NEXT BYTE OF PATTERN
BS       DS    CL1      ; BYTE OF STRING
         DS    0D
WORKLEN  EQU   *-WORKAREA
*--------------------------------------------------------------------*
         PRINT ON
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12   BASE
R13      EQU   13   WORKAREA BASE
R14      EQU   14
R15      EQU   15
*
ATTNHIT  EQU   1
EXPIRED  EQU   2
*--------------------------------------------------------------------*
* REXX MACROS.
*--------------------------------------------------------------------*
         IRXENVB                  ; ENVIRONMENT BLOCK (R0 ON ENTRY)
         IRXEFPL DSECT=YES        ; EXTERNAL FUNCTION PLIST (R1)
         IRXARGTB                 ; MAP THE ARGUMENT LIST.
         IRXEVALB                 ; EVALBLOCK TO RETURN RESULT.
         IRXEXTE                  ; EXTERNAL ENTRY POINTS
         END
