*ASSEMBLY EDECK
         MACRO
&NAME LGNSRCH &START,&END,&LAST=,&LV=,&LA=,                            X
               &KEY=,&KEYOFF=0,&KLV=,&KLA=,&SEQ=A,                     X
               &FOUND=,&NONE=,&REG=1,                                  X
               &DOC=NO
 LCLA &N,&B
* A.ISEARCH (V0.1) 12/05/78 RKC                                         SEAR0005
* A.ISEARCH (V0.1) 04/97 axb minor change - no self-modifications.      SEAR0005
         AIF   ('&NAME' EQ '').NONAME                                   SEAR0009
&NAME    DC    0H'0'                                                    SEAR0010
.NONAME  ANOP
         AIF   ('&LV' EQ '').NOLV1                                      SEAR0014
         AIF   ('&LV'(1,1) EQ '(').LVR1                                 SEAR0015
         AIF   (T'&LV EQ 'N').LVN                                       SEAR0016
         LA    0,&LV              LV= NUMBER                            SEAR0017
         AGO   .NOLV1                                                   SEAR0018
.LVR1    ANOP
         LR    0,&LV(1)            LV= REG                              SEAR0020
.NOLV1   ANOP
         AIF   ('&LA' EQ '').NOLA1                                      SEAR0022
         AIF   ('&LA'(1,1) EQ '(').LAR1                                 SEAR0023
         L     0,&LA              LA= FULLWORD                          SEAR0024
         AGO   .NOLA1                                                   SEAR0025
.LAR1    ANOP
         L     0,0&LA             LA= REG                               SEAR0027
.NOLA1   ANOP
         AIF   ('&KLV&KLA' NE '').YESKL                                 SEAR0029
         LR    1,0                SAVE KEY LENGTH FOR LATER             SEAR0030
.YESKL   ANOP
         LR    15,0               COPY LENGTH                           SEAR0032
         BCTR  15,0                TO CLEAR BOTTOM BIT, TURN LOWER ON   SEAR0033
         XR    15,0                  AND GET DIFFERENT BITS             SEAR0034
         NR    0,15                  WINDING UP WITH ONLY LOWEST BIT    SEAR0035
         AGO   .LENE                                                    SEAR0036
.LVN     ANOP
&N       SETA  &LV                                                      SEAR0038
&B       SETA  1                                                        SEAR0039
         AIF   (&N GT 0).NLOOP                                          SEAR0040
         MNOTE 8,' LV= MUST BE A POSITIVE NUMBER ********************'  SEAR0041
         AGO   .NLOOPE                                                  SEAR0042
.NLOOP   ANOP
         AIF   (&N/2*2 NE &N).NLOOPE                                    SEAR0044
&B       SETA  &B*2                                                     SEAR0045
&N       SETA  &N/2                                                     SEAR0046
         AGO   .NLOOP                                                   SEAR0047
.NLOOPE  ANOP
         LA    0,&B               LOW ORDER BIT OF LENGTH               SEAR0049
.LENE    ANOP
         AIF   ('&KLV' EQ '').NOKLV                                     SEAR0052
         AIF   ('&KLV'(1,1) EQ '(').KLVR                                SEAR0053
         AIF   (T'&KLV EQ 'N').KEYLN                                    SEAR0054
         LA    1,&KLV             KLV= NON-NUMERIC                      SEAR0055
         AGO   .NOKLA                                                   SEAR0056
.KLVR    ANOP
         LR    1,&KLV(1)          KLV= REG                              SEAR0058
.NOKLV   ANOP
         AIF   ('&KLA' EQ '').NOKLA                                     SEAR0060
         AIF   ('&KLA'(1,1) EQ '(').KLAR                                SEAR0061
         L     1,&KLA              KLA= FULLWORD                        SEAR0062
         AGO   .NOKLA                                                   SEAR0063
.KLAR    ANOP
         L     1,0&KLA            KLA= REG                              SEAR0065
.NOKLA   ANOP
         AIF   ('&KLA&KLV' EQ '' AND T'&LV EQ 'N').KEYLN                SEAR0067
         BCTR  1,0                DECREMENT FOR MACHINE INSTR.          SEAR0068
*****    STC   1,CLC&SYSNDX+1         AND SETUP THE COMPARE.            SEAR0069
         LR    2,1               ; Use R2 for execute.
.KEYLN   ANOP
         AIF   ('&START'(1,1) EQ '(').STARTR                            SEAR0072
         LA    14,&START          START=                                SEAR0073
         AGO   .STARTE                                                  SEAR0074
.STARTR  ANOP
         LR    14,&START(1)       GET START FROM REG                    SEAR0076
.STARTE  ANOP
         AIF   ('&LAST' EQ '').NOLAST                                   SEAR0079
         AIF   ('&LAST'(1,1) EQ '(').LASTR                              SEAR0080
         LA    15,&LAST           LAST=                                 SEAR0081
         AGO   .LASTE                                                   SEAR0082
.LASTR   ANOP
         LR    15,&LAST(1)        LAST= REG                             SEAR0084
.LASTE   ANOP
         B     LOOP&SYSNDX        START LOOP                            SEAR0086
         AGO   .ENDE                                                    SEAR0087
.NOLAST  ANOP
         AIF   ('&END'(1,1) EQ '(').ENDR                                SEAR0089
         LA    &REG,&END          END=                                  SEAR0090
         AGO   .ENDE                                                    SEAR0091
.ENDR    ANOP
         LR    &REG,&END(1)       GET END FROM REG                      SEAR0093
.ENDE    ANOP
HIGH&SYSNDX    LR  15,&REG        GET LATEST FAILURE                    SEAR0096
         AIF   ('&LV' EQ '').NOLV2                                      SEAR0097
         AIF   ('&LV'(1,1) EQ '(').LVR2                                 SEAR0098
         LA    &REG,&LV             AND SUBTRACT LENGTH                 SEAR0099
         SR    15,&REG                    FROM IT AS UPPER BOUNDS.      SEAR0100
         AGO   .NOLA2                                                   SEAR0101
.LVR2    ANOP
         SR    15,&LV(1)          AND SUBTRACT LENGTH AS UPPER BOUND.   SEAR0103
.NOLV2   ANOP
         AIF   ('&LA' EQ '').NOLA2                                      SEAR0105
         AIF   ('&LA'(1,1) EQ '(').LAR2                                 SEAR0106
         S     15,&LA               AND SUBTRACT LENGTH FROM IT         SEAR0107
         AGO   .NOLA2                                                   SEAR0108
.LAR2    ANOP
         S     15,0&LA             AND SUBTRACT LENGTH AS UPPER BOUND.  SEAR0110
.NOLA2   ANOP
LOOP&SYSNDX LR &REG,15            GET LENGTH REMAINING                  SEAR0113
         SR    &REG,14              AND SEE IF POINTERS HAVE CROSSED    SEAR0114
         BM    EOF&SYSNDX .           YES, GO GIVE HIGHER ADDR.  RKC0.1 SEAR0115
         NR    &REG,0                   NO, SEE IF DIFFERENCE IS ODD    SEAR0116
         BZ    NOTO&SYSNDX                                              SEAR0117
         AIF   ('&LV' EQ '').NOLV3                                      SEAR0118
         AIF   ('&LV'(1,1) EQ '(').LVR3                                 SEAR0119
         LA    &REG,&LV           USE LV= TO MAKE ODD INTO EVEN  RKC0.1 SEAR0120
         AGO   .NOLV3                                                   SEAR0121
.LVR3    ANOP
         LR    &REG,&LV(1) .      USE LV= TO MAKE ODD INTO EVEN  RKC0.1 SEAR0123
.NOLV3   ANOP
         AIF   ('&LA' EQ '').NOLA3                                      SEAR0125
         AIF   ('&LA'(1,1) EQ '(').LAR3                                 SEAR0126
         L     &REG,&LA           USE LA= TO MAKE ODD INTO EVEN  RKC0.1 SEAR0127
         AGO   .NOLA3                                                   SEAR0128
.LAR3    ANOP
         L     &REG,0&LA   .      USE LA= TO MAKE ODD INTO EVEN  RKC0.1 SEAR0130
.NOLA3   ANOP
NOTO&SYSNDX DC 0H'0'                                                    SEAR0132
         AR    &REG,14    .       LOWER BOUND (MADE EVEN)        RKC0.1 SEAR0133
         AR    &REG,15    .       TO CALCULATE DOUBLE+DIFFERENCE RKC0.1 SEAR0134
         SRL   &REG,1             WE ARE NOW HALF WAY BETWEEN THE TWO.  SEAR0135
         AIF   ('&KLV' EQ '').CLCNKLV                                   SEAR0137
         AIF   ('&KLV'(1,1) EQ '(').CLC0                                SEAR0138
         AIF   (T'&KLV EQ 'N').CLCN                                     SEAR0139
         AGO   .CLC0                                                    SEAR0140
.CLCNKLV ANOP
         AIF   ('&KLA' NE '').CLC0                                      SEAR0142
         AIF   ('&LV' EQ '').CLC0                                       SEAR0143
         AIF   ('&LV'(1,1) EQ '(').CLC0                                 SEAR0144
         AIF   (T'&LV EQ 'N').CLCLVN                                    SEAR0145
.CLC0    ANOP
         B     *+10
CLC&SYSNDX CLC &KEYOFF.(0,&REG),&KEY IS IT THIS KEY?                    SEAR0147
         EX    2,*-6
         AGO   .NOTCLC0                                                 SEAR0148
.CLCN    ANOP
         CLC   &KEYOFF.(&KLV,&REG),&KEY IS IT THIS KEY?                 SEAR0150
         AGO   .NOTCLC0                                                 SEAR0151
.CLCLVN  ANOP
         CLC   &KEYOFF.(&LV,&REG),&KEY IS IT THIS KEY?                  SEAR0153
.NOTCLC0 ANOP
         AIF   ('&SEQ'(1,1) EQ 'D').SEQD                                SEAR0156
         AIF   ('&SEQ'(1,1) EQ 'A').SEQA                                SEAR0157
         MNOTE 4,'SEQ=&SEQ INVALID, SEQ=A ASSUMED.'                     SEAR0158
.SEQA    ANOP
         BH    HIGH&SYSNDX        THIS ENTRY IS HIGHER THAN KEY         SEAR0160
         AGO   .SEQE                                                    SEAR0161
.SEQD    ANOP
         BL    HIGH&SYSNDX        THIS ENTRY IS ABOVE KEY               SEAR0163
.SEQE    ANOP
         AIF   ('&FOUND' EQ '').NOFOUND                                 SEAR0166
         AIF   ('&FOUND'(1,1) EQ '(').FOUNDR                            SEAR0167
         BE    &FOUND             GO TO FOUND=                          SEAR0168
         AGO   .FOUNDE                                                  SEAR0169
.FOUNDR  ANOP
         BCR   8,&FOUND(1)        GO TO FOUND= REG                      SEAR0171
         AGO   .FOUNDE                                                  SEAR0172
.NOFOUND ANOP
         BE    EQ&SYSNDX          THIS ENTRY IS IT                      SEAR0174
.FOUNDE  ANOP
         AIF   ('&LV' EQ '').NOLV4                                      SEAR0177
         AIF   ('&LV'(1,1) EQ '(').LVR4                                 SEAR0178
         AIF   ('&LV'(K'&LV,1) EQ ')').NOTN4                            SEAR0179
         LA    14,&LV.(&REG)      FAILING ENTRY IS LOW                  SEAR0180
         AGO   .NOLV4                                                   SEAR0181
.NOTN4   ANOP
         LA    14,&LV             ADD LENGTH (POSSIBLY BASE-DISPLACEM)  SEAR0183
         AR    14,&REG                TO FAILING ENTRY AS LOWER BOUND.  SEAR0184
         AGO   .NOLV4                                                   SEAR0185
.LVR4    ANOP
         LA    14,0(&REG,&LV(1))  FAILING ENTRY PLUS LENGTH IS LOW-BND  SEAR0187
.NOLV4   ANOP
         AIF   ('&LA' EQ '').NOLA4                                      SEAR0189
         LR    14,&REG             ADD LENGTH TO FAILING ENTRY ADDR     SEAR0190
         AIF   ('&LA'(1,1) EQ '(').LAR4                                 SEAR0191
         A     14,&LA               AS LOWER BOUNDS.                    SEAR0192
         AGO   .NOLA4                                                   SEAR0193
.LAR4    ANOP
         A     14,0&LA               AS LOWER BOUNDS.                   SEAR0195
.NOLA4   ANOP
         B     LOOP&SYSNDX                                              SEAR0198
EOF&SYSNDX LR  &REG,14            GIVE USER NEXT HIGHER FAILING ADDR    SEAR0199
         AIF   ('&NONE' EQ '').NOEOF                                    SEAR0200
         AIF   ('&NONE'(1,1) EQ '(').EOFR                               SEAR0201
         B     &NONE              NONE=                                 SEAR0202
         AGO   .NOEOF                                                   SEAR0203
.EOFR    ANOP
         BR    &NONE(1)           NONE= REG                             SEAR0205
.NOEOF   ANOP
         AIF   ('&FOUND' NE '').NOEQ                                    SEAR0207
EQ&SYSNDX DC   0H'0'                                                    SEAR0208
.NOEQ    ANOP
         AIF   ('&DOC' EQ 'YES').DOC                                    SEAR0211
         MEXIT                                                          SEAR0212
.DOC     ANOP
         MNOTE *,' '                                                    SEAR0214
         MNOTE *,'BINARY SEARCH OF FIXED LENGTH TABLE IN MEMORY'        SEAR0215
         MNOTE *,'****************************************************' SEAR0216
         MNOTE *,' '                                                    SEAR0217
         MNOTE *,' USAGE:'                                              SEAR0218
         MNOTE *,' THE FOLLOWING GIVES THE PARAMETERS FOR THE MACRO,'   SEAR0219
         MNOTE *,'  WITH OPTIONAL PARAMETERS SHOWN IN PARENTHESES,'     SEAR0220
         MNOTE *,'  AND CHOICES SHOWN ONE ABOVE THE OTHER.'             SEAR0221
         MNOTE *,' '                                                    SEAR0222
         MNOTE *,'   LGNSRCH  START,END  ,LV=,KEY=,(REG=1)'             SEAR0223
         MNOTE *,'                  LAST=,LA=,    '                     SEAR0224
         MNOTE *,'                                             ' RKC0.1 SEAR0225
         MNOTE *,'            - - - - - - - - - - - - - - -    ' RKC0.1 SEAR0226
         MNOTE *,' '                                                    SEAR0227
         MNOTE *,'            ,(KLV=),(KEYOFF=0),(SEQ=A)'               SEAR0228
         MNOTE *,'            ,(KLA=)'                                  SEAR0229
         MNOTE *,'                                             ' RKC0.1 SEAR0230
         MNOTE *,'            - - - - - - - - - - - - - - -    ' RKC0.1 SEAR0231
         MNOTE *,' '                                                    SEAR0232
         MNOTE *,'            ,(FOUND=),(NONE=),(DOC=NO)'               SEAR0233
         MNOTE *,' '                                                    SEAR0234
         MNOTE *,'WHERE:'                                               SEAR0235
         MNOTE *,' START IS THE ADDR OF FIRST ENTRY IN TABLE.'          SEAR0236
         MNOTE *,'   IT MAY BE RX-TYPE OR REGISTER NOTATION.'           SEAR0237
         MNOTE *,' END IS THE ADDR JUST BEYOND THE TABLE.'              SEAR0238
         MNOTE *,' LAST= IS THE ADDR OF LAST ENTRY IN TABLE.'           SEAR0239
         MNOTE *,'   ONE OR THE OTHER MUST BE GIVEN, BUT NOT BOTH.'     SEAR0240
         MNOTE *,'   EITHER MAY BE RX-TYPE OR REGISTER NOTATION.'       SEAR0241
         MNOTE *,' LV= IS THE LENGTH VALUE (OF EACH ENTRY).'            SEAR0242
         MNOTE *,' LA= IS THE ADDR OF A FULLWORD GIVING LENGTH.'        SEAR0243
         MNOTE *,'   ONE OR THE OTHER MUST BE GIVEN, BUT NOT BOTH.'     SEAR0244
         MNOTE *,'   BOTH MAY BE RX-TYPE OR REGISTER NOTATION.'         SEAR0245
         MNOTE *,'    AND LV= MAY ALSO BE A NUMBER'                     SEAR0246
         MNOTE *,' KEY= IS THE ADDR OF KEY TO COMPARE FOR.'             SEAR0247
         MNOTE *,'   IT MAY BE RS-TYPE NOTATION ONLY.'                  SEAR0248
         MNOTE *,' '                                                    SEAR0249
         MNOTE *,' THE FOLLOWING ARE OPTIONAL:'                         SEAR0250
         MNOTE *,' '                                                    SEAR0251
         MNOTE *,' REG= IS THE VALUE OF REGISTER TO USE AS POINTER'     SEAR0252
         MNOTE *,'   IF OMMITTED, THEN 1 IS USED'                       SEAR0253
         MNOTE *,'   (OTHER SPECIAL REGISTERS MAY NOT BE USED)'         SEAR0254
         MNOTE *,' NONE=  IS THE ADDR TO BRANCH TO IF NOT FOUND.'   0.1 SEAR0255
         MNOTE *,'   IT MAY BE RX-TYPE OR REGISTER NOTATION'            SEAR0256
         MNOTE *,'   IF NOT GIVEN, THEN NOT FOUND WILL FALL THRU'       SEAR0257
         MNOTE *,' FOUND= IS ADDR TO BRANCH TO WHEN ENTRY EQUALS KEY'   SEAR0258
         MNOTE *,'   MAY BE RX-TYPE OR REGISTER NOTATION'               SEAR0259
         MNOTE *,'   IF NOT GIVEN, THEN EQUAL CONDITION WILL FALL THRU' SEAR0260
         MNOTE *,' KLV= IS VALUE OF KEY LENGTH TO USE FOR COMPARE.'     SEAR0261
         MNOTE *,' KLA= IS ADDR OF FULLWORD WHICH HAS KEY LENGTH.'      SEAR0262
         MNOTE *,'   ONE OR THE OTHER MAY BE GIVEN, BUT NOT BOTH.'      SEAR0263
         MNOTE *,'   EITHER MAY BE RX-TYPE OR REGISTER NOTATION.'       SEAR0264
         MNOTE *,'   KLV= MAY ALSO BE A NUMBER.'                        SEAR0265
         MNOTE *,'   ENTRY LENGTH WILL BE USED IF NEITHER GIVEN'        SEAR0266
         MNOTE *,' KEYOFF= IS THE VALUE TO OFFSET INTO ENTRY BY.'       SEAR0267
         MNOTE *,'   IT MUST BE AN ABSOLUTE VALUE LESS THAN RECLEN.'    SEAR0268
         MNOTE *,'   IF NOT GIVEN, ZERO WILL BE ASSUMED'                SEAR0269
         MNOTE *,'   NOTE THAT IF KEYOFF= IS GIVEN, THEN KEY LENGTH'    SEAR0270
         MNOTE *,'    MUST ALSO BE GIVEN, SINCE KEYOFF+KEYL<=LENGTH'    SEAR0271
         MNOTE *,' SEQ= IS THE SEQUENCE THE KEYS ARE IN.'               SEAR0272
         MNOTE *,'   A IS FOR ASCENDING, D IS FOR DESCENDING.'          SEAR0273
         MNOTE *,'   IF NOT GIVEN THEN SEQ=A IS ASSUMED.'               SEAR0274
         MNOTE *,' '                                                    SEAR0275
         MNOTE *,'NOTES:'                                               SEAR0276
         MNOTE *,' IF EQUAL KEY IS FOUND THEN THE ADDR WILL BE IN REG'  SEAR0277
         MNOTE *,'  AND IF FOUND= IS GIVEN THEN BRANCH WILL OCCUR.'     SEAR0278
         MNOTE *,' IF EQUAL KEY NOT FOUND THEN ADDR OF NEXT HIGHER'     SEAR0279
         MNOTE *,'  ENTRY WILL BE IN REG, ALTHOUGH IT IS YOUR PROBLEM'  SEAR0280
         MNOTE *,'  TO MAKE SURE IT ISN''T BEYOND LAST ENTRY.'          SEAR0281
         MNOTE *,'  WHEN KEY IS NOT FOUND, THE NONE= BRANCH WILL BE'    SEAR0282
         MNOTE *,'   TAKEN IF GIVEN.'                                   SEAR0283
         MNOTE *,' EVEN THOUGH YOU CANNOT USE REGISTER'          RKC0.1 SEAR0284
         MNOTE *,'  NOTATION FOR KEY=, DON''T FORGET THAT THE'   RKC0.1 SEAR0285
         MNOTE *,'  NORMAL WAY TO GIVE A LOCATION OFF OF A'      RKC0.1 SEAR0286
         MNOTE *,'  REGISTER IS, FOR EXAMPLE, 0(R2) !'           RKC0.1 SEAR0287
         MNOTE *,' '
         MNOTE *,' Registers 0,1,14,15 are always used, 2 can also'
         MNOTE *,'    be used'
         MEND                                                           SEAR0288
